name: Continuous integration

on:
  pull_request:
    branches : main
    types: [push, opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.ref }}-${{ github.head_ref }}-ci
  cancel-in-progress: true

jobs:
  Formatting:
    name: Format source
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        directory: [Source, Physics, Geometries, Exec]

    steps:
      - uses: actions/checkout@v3
      - name: Run clang-format
        uses: jidicula/clang-format-action@v4.10.1
        with:
          clang-format-version: '10'
          check-path: ${{ matrix.directory }}

  Linux-GNU:
    if: github.event.pull_request.draft == false    
    needs: Formatting
    name: Linux-GNU
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      matrix:
        ver: [10,12]
        dim: [2, 3]
        mpi: ["TRUE", "FALSE"]
        hdf: ["TRUE", "FALSE"]
        
    env:
      DISCHARGE_HOME: ${{github.workspace}}
      CHOMBO_HOME: ${{github.workspace}}/Submodules/Chombo-3.3/lib
      CORES: 2

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install g++-${{ matrix.ver }} gfortran-${{ matrix.ver}} csh libhdf5-dev libhdf5-openmpi-dev openmpi-bin libblas-dev liblapack-dev
          sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.ver }} 100
          sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ matrix.ver }} 100

      - name: Copy makefile
        run: |
          cp $DISCHARGE_HOME/Lib/Local/GitHub/Make.defs.linux-gcc $CHOMBO_HOME/mk/Make.defs.local

      - name: Build Chombo
        run: |
          make -s -j${{ env.CORES }} DIM=${{ matrix.dim }} USE_HDF=${{ matrix.hdf }} MPI=${{ matrix.mpi }} chombo

      - name: Build chombo-discharge/source
        run: |
          make -s -j${{ env.CORES }} DIM=${{ matrix.dim }} USE_HDF=${{ matrix.hdf }} MPI=${{ matrix.mpi }} discharge-source

      - name: Build chombo-discharge/geometries
        run: |
          make -s -j${{ env.CORES }} DIM=${{ matrix.dim }} USE_HDF=${{ matrix.hdf }} MPI=${{ matrix.mpi }} discharge-geometries

      - name: Build chombo-discharge/physics
        run: |
          make -s -j${{ env.CORES }} DIM=${{ matrix.dim }} USE_HDF=${{ matrix.hdf }} MPI=${{ matrix.mpi }} discharge-physics

      - name: Compile tests
        working-directory: ${{ env.DISCHARGE_HOME}}/Exec/Tests
        if: always()        
        run: |
          python3 tests.py --compile --clean --no_exec -cores=${{ env.CORES }} -dim=${{ matrix.dim }} -mpi=${{ matrix.mpi }} -hdf=${{ matrix.hdf }}
          if [[ $? == 0 ]]; then exit 0; else exit 1; fi

      - name: Run tests
        working-directory: ${{ env.DISCHARGE_HOME}}/Exec/Tests
        if: always()        
        run: |
          python3 tests.py -cores=${{ env.CORES }} -dim=${{ matrix.dim }} -mpi=${{ matrix.mpi }}
          if [[ $? == 0 ]]; then exit 0; else exit 1; fi

  Linux-Intel:
    if: github.event.pull_request.draft == false    
    needs: Formatting
    name: Linux-Intel
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      matrix:
        dim: [2, 3]
        mpi: ["TRUE", "FALSE"]
        hdf: ["FALSE"]
        
    env:
      DISCHARGE_HOME: ${{github.workspace}}
      CHOMBO_HOME: ${{github.workspace}}/Submodules/Chombo-3.3/lib
      CORES: 2

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get -y --no-install-recommends install csh libgetopt-complete-perl

      - name: Install Intel compilers/MPI
        working-directory: /tmp        
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo add-apt-repository "deb https://apt.repos.intel.com/oneapi all main"
          sudo apt-get -y install intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-compiler-fortran intel-oneapi-mkl intel-oneapi-mpi intel-oneapi-mpi-devel intel-oneapi-openmp
      
      - name: Setup compilers
        run: |
          source /opt/intel/oneapi/setvars.sh          

      - name: Copy makefile
        run: |
          source /opt/intel/oneapi/setvars.sh                    
          cp $DISCHARGE_HOME/Lib/Local/GitHub/Make.defs.linux-intel $CHOMBO_HOME/mk/Make.defs.local

      - name: Build Chombo
        run: |
          source /opt/intel/oneapi/setvars.sh                    
          make -s -j${{ env.CORES }} DIM=${{ matrix.dim }} USE_HDF=${{ matrix.hdf }} MPI=${{ matrix.mpi }} chombo

      - name: Build chombo-discharge/source
        run: |
          source /opt/intel/oneapi/setvars.sh                    
          make -s -j${{ env.CORES }} DIM=${{ matrix.dim }} USE_HDF=${{ matrix.hdf }} MPI=${{ matrix.mpi }} discharge-source

      - name: Build chombo-discharge/geometries
        run: |
          source /opt/intel/oneapi/setvars.sh                    
          make -s -j${{ env.CORES }} DIM=${{ matrix.dim }} USE_HDF=${{ matrix.hdf }} MPI=${{ matrix.mpi }} discharge-geometries

      - name: Build chombo-discharge/physics
        run: |
          source /opt/intel/oneapi/setvars.sh                    
          make -s -j${{ env.CORES }} DIM=${{ matrix.dim }} USE_HDF=${{ matrix.hdf }} MPI=${{ matrix.mpi }} discharge-physics

      - name: Compile tests
        working-directory: ${{ env.DISCHARGE_HOME}}/Exec/Tests
        if: always()        
        run: |
          source /opt/intel/oneapi/setvars.sh                              
          python3 tests.py --compile --clean --no_exec -cores=${{ env.CORES }} -dim=${{ matrix.dim }} -mpi=${{ matrix.mpi }} -hdf=${{ matrix.hdf }}
          if [[ $? == 0 ]]; then exit 0; else exit 1; fi

      - name: Run tests
        working-directory: ${{ env.DISCHARGE_HOME}}/Exec/Tests
        if: always()        
        run: |
          source /opt/intel/oneapi/setvars.sh                              
          python3 tests.py -cores=${{ env.CORES }} -dim=${{ matrix.dim }} -mpi=${{ matrix.mpi }}
          if [[ $? == 0 ]]; then exit 0; else exit 1; fi                                                  

  Build-documentation:
    needs: Formatting
    runs-on : ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install depdencies
        run: |
          sudo apt-get update
          sudo apt install doxygen
          sudo apt install graphviz
          sudo apt install texlive
          sudo apt install texlive-latex-extra
          sudo apt install latexmk
          python3 -m pip install sphinx==5.0.0 sphinx_rtd_theme sphinxcontrib-bibtex

      - name: Build doxygen
        run: |
          doxygen Docs/doxygen.conf

      - name: Build HTML documentation
        working-directory: ${{ github.workspace }}/Docs/Sphinx        
        run: |
          make html

      - name: Build PDF documentation
        working-directory: ${{ github.workspace }}/Docs/Sphinx
        run: |
          make latexpdf

      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          name: docs
          path: Docs/Sphinx/build

      - name: Cleanup
        working-directory: ${{ github.workspace }}/Docs
        run: |
          cp -a Sphinx/build/html/* ./
          mv Sphinx/build/latex/chombo-discharge.pdf ./
          rm -rf Sphinx/build          
        
  CI-passed:
    needs: [Linux-GNU, Linux-Intel, Build-documentation]
    runs-on: ubuntu-latest
    steps:
      - name: Do nothing
        run: |          
