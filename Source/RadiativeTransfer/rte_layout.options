# ====================================================================================================
# RTE_LAYOUT CLASS OPTIONS
# ====================================================================================================
rte_layout.which_solver = EddingtonSP1 # Solver type. Available option is "EddingtonSP1"
rte_layout.stationary   = true          # Stationary solver ot no.

rte_solver.plt_vars = phi src

# ---------------------------
# EddingtonSP1 class options
#----------------------------
EddingtonSP1.stationary         = true      # Stationary solver
EddingtonSP1.reflectivity       = 0.        # Reflectivity
EddingtonSP1.use_tga            = false     # Second order integration (if transient)
EddingtonSP1.gmg_verbosity      = -1        # GMG verbosity
EddingtonSP1.gmg_pre_smooth     = 6         # Number of relaxations in downsweep
EddingtonSP1.gmg_post_smooth    = 6         # Number of relaxations in upsweep
EddingtonSP1.gmg_bott_smooth    = 6         # NUmber of relaxations before dropping to bottom solver
EddingtonSP1.gmg_min_iter       = 5         # Minimum number of iterations
EddingtonSP1.gmg_max_iter       = 32        # Maximum number of iterations
EddingtonSP1.gmg_tolerance      = 1.E-8     # Residue tolerance
EddingtonSP1.gmg_hang           = 0.2       # Solver hang
EddingtonSP1.gmg_bottom_drop    = 16        # Bottom drop
EddingtonSP1.gmg_bottom_solver  = bicgstab  # Bottom solver type. Valid options are 'simple' and 'bicgstab'
EddingtonSP1.gmg_bottom_relax   = 32        # Number of relaxations in bottom solve ('simple' solver only)

EddingtonSP1.stochastic_photons = false     # Draw discrete photons from continuum distribution
EddingtonSP1.seed               = 0         # Seed

EddingtonSP1.bc_x_low  = robin              # Boundary on domain. 'neumann' or 'robin'
EddingtonSP1.bc_x_high = robin              # Boundary on domain. 'neumann' or 'robin'              
EddingtonSP1.bc_y_low  = robin              # Boundary on domain. 'neumann' or 'robin'
EddingtonSP1.bc_y_high = robin              # Boundary on domain. 'neumann' or 'robin'
EddingtonSP1.bc_z_low  = robin              # Boundary on domain. 'neumann' or 'robin'
EddingtonSP1.bc_z_high = robin              # Boundary on domain. 'neumann' or 'robin'

# ====================================================================================================
# MC_PHOTO CLASS OPTIONS
#
# The mc_photo class is intended as a flexible RTE solver that may interface into several descriptions.
# Because of that we allow several deposition types, e.g. cloud-in-cell if one wants to compute photoionization
# profiles with less noise. If one wants the photoionization profile (which is what gets passed around
# in the TimeStepper framework) to contain just the number of photons in a cell, one would use
# deposition_type = num. This is useful for SSA type algorithms. 
#
# Since the photoproduction source term is filled externally, and the filling of this depends on the
# CFD/FHD description, mc_photo.source_type species what the solver will expect when drawing photons.
# For example, if one species 'volume_rate', mc_photo will interpret the internal data so as to contain
# a rate per unit volume. The number of photons produced in a volume will then be S*dx^3*dt. If you
# filled the source term with just the number of photons that will be produced in a cell, you should
# use source_type = number.
#
# The photogeneration mechanism can be done stochastically or determinsitically. How this is interpreted
# depends on how you implemented your source terms through the plasma_kinetics interface (or equivalent).
# This design makes sense for FHD models because the number of photons produced in a cell can be
# computed directly, e.g. with SSA algorithms. In this way the stochasticity is provided by the SSA
# algorithm and one would use mc_photo.source_type = deterministic. For CFD models one would probably
# work with a volumetric rate, in which one could draw the number of photons from a Poisson distribution. 
# ====================================================================================================
mc_photo.max_photons       = 1             # Maximum no. generated in a cell (<= 0 yields physical photons)
mc_photo.pvr_buffer        = 2             # Buffer for PVR. Prevents clouds from leaking onto coarse levels. 
mc_photo.random_kappa      = true          # Randomize absorption length (taken from photon implementation)
mc_photo.bisect_step       = 1.E-4         # Bisection step length for intersection tests
mc_photo.seed              = 0             # Seed for RNG
mc_photo.bc_x_low          = outflow       # Boundary condition. 'outflow', 'symmetry', or 'wall'
mc_photo.bc_x_high         = outflow       # Boundary condition
mc_photo.bc_y_low          = outflow       # Boundary condition
mc_photo.bc_y_high         = outflow       # Boundary condition
mc_photo.bc_z_low          = outflow       # Boundary condition
mc_photo.bc_z_high         = outflow       # Boundary condition
mc_photo.poiss_exp_swap    = 100           # Swap out Poisson with exponential distribution above this mean
mc_photo.photon_generation = stochastic    # Volumetric source term. 'deterministic' or 'stochastic'
mc_photo.source_type       = volume_rate   # 'number'      = Source term contains the number of photons produced
                                           # 'volume'      = Source terms contains the number of photons produced per unit volume
                                           # 'volume_rate' = Source terms contains the volumetric rate
                                           # 'rate'        = Source terms contains the rate
mc_photo.deposition        = ngp           # 'ngp' = nearest grid point
                                           # 'num' = # of photons per cell
                                           # 'cic' = cloud-in-cell
                                           # 'tsc' = triangle-shaped-cloud
                                           # 'w4'  = 3rd order interpolation
