      subroutine advectivederiv(
     &     chf_fra1[udelrho],
     &     chf_const_fra1[facerho],
     &     chf_const_fra1[facevel],
     &     chf_const_int[facedir],
     &     chf_const_int[ncomp],
     &     chf_const_real[dx],
     &     chf_box[dcalc],
     &)

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer spacedim,iv
      real_t  uave, rhodiff, hival, loval
      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      spacedim = CH_SPACEDIM

         do iv = 0,ncomp - 1

            chf_multido[dcalc;i;j;k]

            hival = facevel(chf_ix[i+ioff;j+joff;k+koff])*facerho(chf_ix[i+ioff;j+joff;k+koff])
            loval = facevel(chf_ix[i     ;j     ;k     ])*facerho(chf_ix[i     ;j     ;k     ])


            udelrho(chf_ix[i;j;k]) = udelrho(chf_ix[i;j;k]) + (hival-loval)/dx

            chf_enddo

         enddo
         ch_flops=ch_flops+CHF_POINTS[dcalc]*5*ncomp

      return
      end

      subroutine consdiv_reg(
     &     chf_fra1[udelrho],
     &     chf_const_fra1[faceflux],
     &     chf_const_int[facedir],
     &     chf_const_real[dx],
     &     chf_box[dcalc],
     &)

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      integer spacedim,iv
      real_t  uave, rhodiff, hival, loval, idx
      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      idx = 1.0/dx
      spacedim = CH_SPACEDIM

      chf_multido[dcalc;i;j;k]
         hival = faceflux(chf_ix[i+ioff;j+joff;k+koff]);
         loval = faceflux(chf_ix[i     ;j     ;k     ]);


         udelrho(chf_ix[i;j;k]) = udelrho(chf_ix[i;j;k]) + (hival-loval)*idx
      chf_enddo
      return
      end


      subroutine source_dt(
     &     chf_real[min_dt],
     &     chf_const_fra1[state],
     &     chf_const_fra1[source],
     &     chf_const_real[tolerance],
     &     chf_const_real[max_state],
     &     chf_box[region])

      real_t dt, phi, src

      integer chf_ddecl[i; j; k]
#if CH_SPACEDIM==3
      do k = CHF_LBOUND[region;2], CHF_UBOUND[region;2]
#endif
         do j = CHF_LBOUND[region;1], CHF_UBOUND[region;1]
            do i = CHF_LBOUND[region;0], CHF_UBOUND[region;0]
	       dt = 1.E30;
               phi = state(chf_ix[i;j;k])
               src = source(chf_ix[i;j;k])
	       
               if(abs(phi) > tolerance*max_state .and. src > 0.0) then
                  dt = abs(phi/src)
               endif
	       
     	       min_dt = min(dt, min_dt)
            enddo
         enddo
#if CH_SPACEDIM==3
      enddo
#endif

      return
      end

      subroutine get_max_vel(
     &     chf_real[max_vel],
     &     chf_const_fra1[velo],
     &     chf_box[box],
     &     chf_const_fba1[mask])

      real_t vel, dt
      integer chf_ddecl[i; j; k]
      CHF_MULTIDO[box; i; j; k]
         max_vel = max(max_vel, abs(velo(CHF_IX[i;j;k]))*mask(CHF_IX[i;j;k]))
      CHF_ENDDO
      return
      end

      subroutine get_maxnorm(
     &     chf_real[max_vel],
     &     chf_const_fra1[velo],
     &     chf_box[box])

      real_t vel, dt
      integer chf_ddecl[i; j; k]
      CHF_MULTIDO[box; i; j; k]
         max_vel = max(max_vel, abs(velo(CHF_IX[i;j;k])));
      CHF_ENDDO
      return
      end

      subroutine advection_dt(
     &     chf_fra1[min_dt],      
     &     chf_const_fra[velo],
     &     chf_const_real[dx],
     &     chf_box[dcalc])

      real_t vel
      integer chf_ddecl[i; j; k]

#if CH_SPACEDIM==3
      do k = CHF_LBOUND[dcalc;2], CHF_UBOUND[dcalc;2]
#endif
         do j = CHF_LBOUND[dcalc;1], CHF_UBOUND[dcalc;1]
            do i = CHF_LBOUND[dcalc;0], CHF_UBOUND[dcalc;0]
     	       vel = CHF_DTERM[
     &                abs(velo(chf_ix[i;j;k],0));
     &              + abs(velo(chf_ix[i;j;k],1));
     &              + abs(velo(chf_ix[i;j;k],2))]
     	       min_dt(chf_ix[i;j;k]) = dx/vel
            enddo
         enddo
#if CH_SPACEDIM==3
      enddo
#endif

      return
      end

      subroutine diffusion_dt(
     &     chf_fra1[min_dt],      
     &     chf_const_fra1[diffco],
     &     chf_const_real[dx],
     &     chf_const_int[facedir],
     &     chf_box[cellbox])

      real_t D, Dlo, Dhi, dt
      integer chf_ddecl[i; j; k]

      integer chf_ddecl[ioff; joff; koff]
      chf_dterm[ioff = chf_id(0,facedir);
                joff = chf_id(1,facedir);
                koff = chf_id(2,facedir)]
      		
      chf_multido[cellbox; i;j; k]
         Dlo = diffco(chf_ix[i;      j;      k])
         Dhi = diffco(chf_ix[i+ioff; j+joff; k+koff])      	 
         D   = max(Dlo, Dhi)
         dt  = dx*dx/(2*CH_SPACEDIM*D)
	 
         min_dt(chf_ix[i;j;k]) = min(min_dt(chf_ix[i;j;k]), dt)
      chf_enddo	 

      return
      end

      subroutine advection_diffusion_dt_one(
     &     chf_fra1[invDt],      
     &     chf_const_fra1[diffco],
     &     chf_const_real[dx],
     &     chf_const_int[facedir],
     &     chf_box[cellbox])

      real_t D, Dlo, Dhi, idt
      integer chf_ddecl[i; j; k]

      integer chf_ddecl[ioff; joff; koff]
      chf_dterm[ioff = chf_id(0,facedir);
                joff = chf_id(1,facedir);
                koff = chf_id(2,facedir)]
      		
      chf_multido[cellbox; i;j; k]
         Dlo = diffco(chf_ix[i;      j;      k])
         Dhi = diffco(chf_ix[i+ioff; j+joff; k+koff])      	 
         D   = max(Dlo, Dhi)
         idt = (2*CH_SPACEDIM*D)/(dx*dx)
	 
         invDt(chf_ix[i;j;k]) = max(invDt(chf_ix[i;j;k]), idt)
      chf_enddo	 

      return
      end

      subroutine advection_diffusion_dt_two(
     &     chf_fra1[invDt],      
     &     chf_const_fra[velo],
     &     chf_const_real[dx],
     &     chf_box[dcalc])

      real_t vel
      integer chf_ddecl[i; j; k]

#if CH_SPACEDIM==3
      do k = CHF_LBOUND[dcalc;2], CHF_UBOUND[dcalc;2]
#endif
         do j = CHF_LBOUND[dcalc;1], CHF_UBOUND[dcalc;1]
            do i = CHF_LBOUND[dcalc;0], CHF_UBOUND[dcalc;0]
     	       vel = CHF_DTERM[
     &                abs(velo(chf_ix[i;j;k],0));
     &              + abs(velo(chf_ix[i;j;k],1));
     &              + abs(velo(chf_ix[i;j;k],2))]
     	       invDt(chf_ix[i;j;k]) = invDt(chf_ix[i;j;k]) + vel/dx
            enddo
         enddo
#if CH_SPACEDIM==3
      enddo
#endif

      return
      end

      subroutine advection_diffusion_dt_invert(
     &     chf_fra1[invDt],      
     &     chf_box[dcalc])

      integer chf_ddecl[i; j; k]

#if CH_SPACEDIM==3
      do k = CHF_LBOUND[dcalc;2], CHF_UBOUND[dcalc;2]
#endif
         do j = CHF_LBOUND[dcalc;1], CHF_UBOUND[dcalc;1]
            do i = CHF_LBOUND[dcalc;0], CHF_UBOUND[dcalc;0]
     	       invDt(chf_ix[i;j;k]) = 1.0/invDt(chf_ix[i;j;k])
            enddo
         enddo
#if CH_SPACEDIM==3
      enddo
#endif

      return
      end

      subroutine dflux_reg(
     &     chf_fra1[divD],
     &     chf_const_fra1[state],
     &     chf_const_fra1[dco],     
     &     chf_const_int[facedir],
     &     chf_const_real[dx],
     &     chf_box[facebox],
     &)

      integer chf_ddecl[i; j; k]
      integer chf_ddecl[ioff; joff; koff]
      real_t  hival, loval, idx
      
      chf_dterm[
      ioff = chf_id(0,facedir);
      joff = chf_id(1,facedir);
      koff = chf_id(2,facedir)]

      idx = 1.0/dx

      chf_multido[facebox;i;j;k]
         loval = state(chf_ix[i-ioff;j-joff;k-koff]);
         hival = state(chf_ix[i     ;j     ;k     ]);

         divD(chf_ix[i;j;k]) = dco(chf_ix[i;j;k])*(hival-loval)*idx
      chf_enddo
      return
      end

