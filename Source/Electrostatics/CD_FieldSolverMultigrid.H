/* chombo-discharge
 * Copyright Â© 2021 SINTEF Energy Research.
 * Please refer to Copyright.txt and LICENSE in the chombo-discharge root directory.
 */

/*!
  @file   CD_FieldSolverMultigrid.H
  @brief  Declaration of FieldSolverMultigrid
  @author Robert Marskar
*/

#ifndef CD_FieldSolverMultigrid_H
#define CD_FieldSolverMultigrid_H

// Chombo includes
#include <AMRMultiGrid.H>
#include <BiCGStabSolver.H>
#include <MFSimpleSolver.H>
#include <GMRESSolver.H>

// Our includes
#include <CD_FieldSolver.H>
#include <CD_MFHelmholtzOpFactory.H>
#include <CD_NamespaceHeader.H>

/*!
  @brief Implementation of FieldSolver which uses multigrid. 
*/
class FieldSolverMultigrid : public FieldSolver {
protected:

  /*!
    @brief Enum class for supported bottom solvers in multigrid.
  */
  enum class BottomSolverType {
    Simple,
    BiCGStab,
    GMRES
  };

  /*!
    @brief Enum for multigrid cycle types. 
  */
  enum class MultigridType{
    VCycle,
    WCycle,
  };
  
public:

  /*!
    @brief Weak constructor. Sets basic parameters. 
  */
  FieldSolverMultigrid();

  /*!
    @brief Disallowed copy constructor
    @param[in] a_other Other solver
  */
  FieldSolverMultigrid(const FieldSolverMultigrid& a_other) = delete;

  /*!
    @brief Disallowed move constructor
    @param[in] a_other Other solver
  */
  FieldSolverMultigrid(const FieldSolverMultigrid&& a_other) = delete;

  /*!
    @brief Disallowed copy assignment operator
    @param[in] a_other Other solver
  */
  FieldSolverMultigrid& operator=(const FieldSolverMultigrid& a_other) = delete;

  /*!
    @brief Disallowed move assignment operator
    @param[in] a_other Other solver
  */
  FieldSolverMultigrid& operator=(const FieldSolverMultigrid&& a_other) = delete;

  /*!
    @brief Constructor
  */
  virtual ~FieldSolverMultigrid();

  /*!
    @brief Solves Poisson equation onto a_phi using a_rho and a_sigma as right-hand sides. 
    @param[inout] a_potential Potential
    @param[in] a_rho Space charge density
    @param[in] a_sigma Surface charge density. 
    @param[in] a_zeroPhi Set a_potential to zero first. 
    @return True if we found a solution and false otherwise. 
    @note a_sigma must be defined on the gas phase. 
  */
  virtual bool solve(MFAMRCellData&       a_potential,
		     const MFAMRCellData& a_rho,
		     const EBAMRIVData&   a_sigma,
		     const bool           a_zerophi = false) override;

  /*!
    @brief Parse all class options from command-line or input script. 
  */
  virtual void parseOptions() override;

  /*!
    @brief Parse runtime options from command line or input script. 
  */
  virtual void parseRuntimeOptions() override;

  /*!
    @brief Regrid method. 
    @details This calls the parent regrid function first. We only need the overwrite because we have to signal that multigrid must be set up again. 
    @param[in] a_lmin           Coarsest level where grids did not change. 
    @param[in] a_oldFinestLevel Previous finest AMR level
    @param[in] a_newFinestLevel New finest AMR level. 
    @details This linearly interpolates (with limiters) m_potential to the new grids and recomputes the electric field (from the interpolated potential). 
  */
  virtual void regrid(const int a_lmin, const int a_oldFinestLevel, const int a_newFinestLevel) override;

  /*!
    @brief Registers required operators for AMR for this class. 
  */
  virtual void registerOperators() override;

  /*!
    @brief Allocates internal storage. 
  */
  virtual void allocateInternals() override;
  
  /*!
    @brief Set up multigrid solver
  */
  virtual void setupSolver() override;

  /*!
    @brief Compute grid loads
  */
  virtual Vector<long long> computeLoads(const DisjointBoxLayout& a_dbl, const int a_level) override;
  
protected:

  /*!
    @brief alpha-coefficient (for Helmholtz operator)
  */
  static constexpr Real m_alpha = 0.0;

  /*!
    @brief Beta-coefficient (for Helmholtz operator)
  */
  static constexpr Real m_beta  = -1.0;

  /*!
    @brief Relaxation type for gmg
  */
  MFHelmholtzOp::Smoother m_multigridRelaxMethod;

  /*!
    @brief GMG multigrid type
  */
  MultigridType m_multigridType;
  
  /*!
    @brief Bottom solver type
  */
  BottomSolverType m_bottomSolverType;

  /*!
    @brief Scale by kappa or not
  */
  bool m_kappaSource;

  /*!
    @brief Needs setup
  */
  bool m_isSolverSetup;

  /*!
    @brief Verbosity for geometric multigrid
  */
  int m_multigridVerbosity;

  /*!
    @brief Number of smoothing for multigrid
  */
  int m_multigridSmooth;

  /*!
    @brief Number of smoothings before averaging
  */
  int m_multigridPreSmooth;

  /*!
    @brief Number of smoothings before averaging
  */
  int m_multigridPostSmooth;

  /*!
    @brief Number of smoothing before bottom solver
  */
  int m_multigridBottomSmooth;

  /*!
    @brief Maximum number of iterations
  */
  int m_multigridMaxIterations;

  /*!
    @brief Minimum number of iterations
  */
  int m_multigridMinIterations;

  /*!
    @brief Number of smoothing for bottom solver
  */
  int m_numSmoothingsForSimpleSolver;

  /*!
    @brief Set bottom drop depth
  */
  int m_minCellsBottom;

  /*!
    @brief Set bc order 
  */
  int m_multigridBcOrder;

  /*!
    @brief Set bc weight (used for weighted least squares)
  */
  int m_multigridBcWeight;

  /*!
    @brief Set bc jump order 
  */
  int m_multigridJumpOrder;

  /*!
    @brief Set bc jump weight (used for weighted least squares)
  */
  int m_multigridJumpWeight;

  /*!
    @brief Solver residue. If the residue is greater than this, we have a problematic cell. 
  */
  Real m_convergedResidue;

  /*!
    @brief Exit tolerance for multigrid. 
    @details Multigrid exits if L(phi) < tolerance*L(phi=0)
  */
  Real m_multigridExitTolerance;
  
  /*!
    @brief Exit hang for multigrid
    @details Multigrid exits if residue is not reduce by at least this factor. 
  */
  Real m_multigridExitHang;

  /*!
    @brief Multigrid operator factory. 
  */
  RefCountedPtr<MFHelmholtzOpFactory> m_helmholtzOpFactory;

  /*!
    @brief Zero
  */
  MFAMRCellData m_zero;

  /*!
    @brief Scaled soruce
  */
  MFAMRCellData m_kappaRhoByEps0;

  /*!
    @brief Sigma
  */
  EBAMRIVData m_sigmaByEps0;

  /*!
    @brief Geometric multigrid solver
  */
  AMRMultiGrid<LevelData<MFCellFAB> > m_multigridSolver;

  /*!
    @brief Conjugate gradient solver bottom MG level
  */
  BiCGStabSolver<LevelData<MFCellFAB> > m_bicgstab;

  /*!
    @brief GMRES solver
  */
  GMRESSolver<LevelData<MFCellFAB> > m_gmres;

  /*!
    @brief multi-fluid simple solver
  */
  MFSimpleSolver m_mfsolver;

  /*!
    @brief Parse multigrid settings
  */
  virtual void parseMultigridSettings();

  /*!
    @brief Parse m_kappaSource
  */
  virtual void parseKappaSource();

  /*!
    @brief Set up the multigrid operator factory
  */
  virtual void setupHelmholtzFactory();

  /*!
    @brief Set up AMRMultiGrid
  */
  virtual void setupMultigrid();
};

#include <CD_NamespaceFooter.H>

#endif
