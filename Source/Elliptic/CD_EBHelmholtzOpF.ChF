      subroutine addbcotermtoinvrelcoef(
     &     chf_fra1[relcoef],
     &     chf_const_fra1[bcoef],
     &     chf_const_real[beta],
     &     chf_const_real[dx],
     &     chf_const_int[idir],
     &     chf_box[cellbox])

      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ii;jj;kk]
      real_t fac;

      chf_dterm[ii = chf_id(idir, 0);
                jj = chf_id(idir, 1);
                kk = chf_id(idir, 2)]

      fac = beta/(dx*dx);

      chf_multido[cellbox;i;j;k]
         relcoef(chf_ix[i;j;k]) = relcoef(chf_ix[i;j;k]) - fac*(bcoef(chf_ix[i+ii;j+jj;k+kk]) + bcoef(chf_ix[i;j;k]))
      chf_enddo

      end


      subroutine invertrelaxationcoefficient(
     &     chf_fra1[relcoef],
     &     chf_box[cellbox])


      integer chf_ddecl[i;j;k]

      chf_multido[cellbox;i;j;k]
         relcoef(chf_ix[i;j;k]) = 1./relcoef(chf_ix[i;j;k])
      chf_enddo

      end


      subroutine getinteriorregflux(
     &     chf_fra1[regflux],
     &     chf_const_fra1[phi],
     &     chf_const_fra1[bco],
     &     chf_const_int[dir],
     &     chf_const_real[dx],		          
     &     chf_box[facebox])

   
      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ioff;joff;koff]
      real_t invDx
      real_t phiHi
      real_t phiLo

      chf_dterm[
         ioff = chf_id(0,dir);
         joff = chf_id(1,dir);
         koff = chf_id(2,dir)]


      invDx = 1./dx
      
      chf_multido[facebox;i;j;k]
         regflux(chf_ix[i;j;k]) = bco(chf_ix[i;j;k]) * invDx * (phi(chf_ix[i;j;k]) - phi(chf_ix[i-ioff; j-joff; k-koff]))
      chf_enddo

      end

      subroutine laplacianinplace(
     &     chf_fra1[Lphi],
     &     chf_const_fra1[phi],
     &     chf_const_fra1[bcoX],
     &     chf_const_fra1[bcoY],
     &     chf_const_fra1[bcoZ],          
     &     chf_const_real[dx],
     &     chf_const_real[beta],		               
     &     chf_box[cellBox])

      integer chf_ddecl[i;j;k]
      real_t factor
      real_t lapl

      factor = beta/(dx*dx)
      
      chf_multido[cellBox;i;j;k]
         lapl = CHF_DTERM[
     &       bcoX(chf_ix[i+1;j  ;k  ]) * (phi(chf_ix[i+1; j  ;  k  ]) - phi(chf_ix[i;  j;  k  ]))
     &      -bcoX(chf_ix[i  ;j  ;k  ]) * (phi(chf_ix[i;   j  ;  k  ]) - phi(chf_ix[i-1;j;  k  ]));
     &      +bcoY(chf_ix[i  ;j+1;k  ]) * (phi(chf_ix[i;   j+1;  k  ]) - phi(chf_ix[i;  j;  k  ]))
     &      -bcoY(chf_ix[i  ;j  ;k  ]) * (phi(chf_ix[i;   j  ;  k  ]) - phi(chf_ix[i  ;j-1;k  ]));
     &      +bcoZ(chf_ix[i  ;j;  k+1]) * (phi(chf_ix[i;   j  ;  k+1]) - phi(chf_ix[i;  j;  k  ]))
     &      -bcoZ(chf_ix[i  ;j  ;k  ]) * (phi(chf_ix[i;   j  ;  k  ]) - phi(chf_ix[i  ;j;  k-1]))]

         Lphi(chf_ix[i;j;k]) = Lphi(chf_ix[i;j;k]) + lapl*factor
      chf_enddo      
      end

      subroutine helmholtzapplydomainflux(
     &     chf_fra1[phi],
     &     chf_const_fra1[flux],
     &     chf_const_fra1[bco],
     &     chf_const_real[dx],
     &     chf_const_int[side],
     &     chf_const_int[dir],		                    
     &     chf_box[cellbox])


      integer chf_ddecl[i;   j;   k   ]
      integer chf_ddecl[ioff;joff;koff]

      real_t scaledflux

      chf_dterm[
        ioff = chf_id(0,dir);
        joff = chf_id(1, dir);
        koff = chf_id(2, dir)]

      chf_multido[cellbox; i;j;k]
         if(side .eq. 1) then
            scaledflux         = flux(chf_ix[i-ioff; j-joff; k-koff])/bco(chf_ix[i-ioff; j-joff; k-koff]) 	 
            phi(chf_ix[i;j;k]) = phi (chf_ix[i-ioff; j-joff; k-koff]) + scaledflux*dx
         else
            scaledflux         = flux(chf_ix[i+ioff; j+joff; k+koff])/bco(chf_ix[i+ioff; j+joff; k+koff]) 	 
            phi(chf_ix[i;j;k]) = phi( chf_ix[i+ioff; j+joff; k+koff]) - scaledflux*dx	 
         endif
      chf_enddo
      end

      subroutine helmholtzgsrbcolor(
     &     chf_fra1[phi],
     &     chf_const_fra1[lphi],
     &     chf_const_fra1[rhs],
     &     chf_const_fra1[relCoef],
     &     chf_box[coloredBox])

      integer chf_ddecl[i;j;k]

      chf_multido[coloredBox;i;j;k;2]
         phi(chf_ix[i;j;k]) = phi(chf_ix[i;j;k]) + relCoef(chf_ix[i;j;k]) * (rhs(chf_ix[i;j;k]) - lphi(chf_ix[i;j;k]))
      chf_enddo
      end