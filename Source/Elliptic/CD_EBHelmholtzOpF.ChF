      subroutine addbcotermtoinvrelcoef(
     &     chf_fra1[relcoef],
     &     chf_const_fra1[bcoef],
     &     chf_const_real[beta],
     &     chf_const_real[dx],
     &     chf_const_int[idir],
     &     chf_box[cellbox])

      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ii;jj;kk]
      real_t fac;

      chf_dterm[ii = chf_id(idir, 0);
                jj = chf_id(idir, 1);
                kk = chf_id(idir, 2)]

      fac = beta/(dx*dx);

      chf_multido[cellbox;i;j;k]
         relcoef(chf_ix[i;j;k]) = relcoef(chf_ix[i;j;k]) - fac*(bcoef(chf_ix[i+ii;j+jj;k+kk]) + bcoef(chf_ix[i;j;k]))
      chf_enddo

      end


      subroutine invertrelaxationcoefficient(
     &     chf_fra1[relcoef],
     &     chf_box[cellbox])


      integer chf_ddecl[i;j;k]

      chf_multido[cellbox;i;j;k]
         relcoef(chf_ix[i;j;k]) = 1./relcoef(chf_ix[i;j;k])
      chf_enddo

      end


      subroutine getinteriorregflux(
     &     chf_fra1[regflux],
     &     chf_const_fra1[phi],
     &     chf_const_fra1[bco],
     &     chf_const_int[dir],
     &     chf_const_real[dx],		          
     &     chf_box[facebox])

   
      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ioff;joff;koff]
      real_t invDx
      real_t phiHi
      real_t phiLo

      chf_dterm[
         ioff = chf_id(0,dir);
         joff = chf_id(1,dir);
         koff = chf_id(2,dir)]


      invDx = 1./dx
      
      chf_multido[facebox;i;j;k]
         regflux(chf_ix[i;j;k]) = bco(chf_ix[i;j;k]) * invDx * (phi(chf_ix[i;j;k]) - phi(chf_ix[i-ioff; j-joff; k-koff]))
      chf_enddo

      end

      subroutine helmholtzinplace(
     &     chf_fra1[Lphi],
     &     chf_const_fra1[phi],
     &     chf_const_fra1[aco],	
     &     chf_const_fra1[bcoX],
     &     chf_const_fra1[bcoY],
     &     chf_const_fra1[bcoZ],          
     &     chf_const_real[dx],
     &     chf_const_real[alpha],     
     &     chf_const_real[beta],		               
     &     chf_box[cellBox])

      integer chf_ddecl[i;j;k]
      real_t factor
      real_t lapl
      real_t diag

      factor = beta/(dx*dx)
      
      chf_multido[cellBox;i;j;k]
         Lphi(chf_ix[i;j;k]) = alpha*aco(chf_ix[i;j;k])*phi(chf_ix[i;j;k])
     &      + factor*(CHF_DTERM[
     &          bcoX(chf_ix[i+1;j  ;k  ]) * (phi(chf_ix[i+1; j  ;  k  ]) - phi(chf_ix[i;  j;  k  ]))
     &         -bcoX(chf_ix[i  ;j  ;k  ]) * (phi(chf_ix[i;   j  ;  k  ]) - phi(chf_ix[i-1;j;  k  ]));
     &         +bcoY(chf_ix[i  ;j+1;k  ]) * (phi(chf_ix[i;   j+1;  k  ]) - phi(chf_ix[i;  j;  k  ]))
     &         -bcoY(chf_ix[i  ;j  ;k  ]) * (phi(chf_ix[i;   j  ;  k  ]) - phi(chf_ix[i  ;j-1;k  ]));
     &         +bcoZ(chf_ix[i  ;j;  k+1]) * (phi(chf_ix[i;   j  ;  k+1]) - phi(chf_ix[i;  j;  k  ]))
     &         -bcoZ(chf_ix[i  ;j  ;k  ]) * (phi(chf_ix[i;   j  ;  k  ]) - phi(chf_ix[i  ;j;  k-1]))])
      chf_enddo      
      end

      subroutine helmholtzgausairedblack(
     &     chf_fra1[phi],
     &     chf_const_fra1[lphi],
     &     chf_const_fra1[rhs],
     &     chf_const_fra1[relCoef],
     &     chf_const_int[redBlack],     
     &     chf_box[box])

      integer chf_ddecl[i;j;k]
      integer imin, imax, indtot

#if CH_SPACEDIM==3
      do k=CHF_LBOUND[box; 2], CHF_UBOUND[box; 2]
#endif
         do j=CHF_LBOUND[box; 1], CHF_UBOUND[box; 1]

            imin = CHF_LBOUND[box; 0]
            imax = CHF_UBOUND[box; 0]

            CHF_DTERM[indtot=imin; +j; +k]
            imin = imin + abs(mod(indtot + redBlack, 2))

            do i=imin, imax, 2
               phi(chf_ix[i;j;k]) = phi(chf_ix[i;j;k]) + relCoef(chf_ix[i;j;k]) * (rhs(chf_ix[i;j;k]) - lphi(chf_ix[i;j;k]))
            enddo
         enddo
#if CH_SPACEDIM==3
      enddo
#endif      
      end

      subroutine helmholtzgausaicolor(
     &     chf_fra1[phi],
     &     chf_const_fra1[lphi],
     &     chf_const_fra1[rhs],
     &     chf_const_fra1[relCoef],
     &     chf_box[coloredBox])

      integer chf_ddecl[i;j;k]

      chf_multido[coloredBox;i;j;k;2]
         phi(chf_ix[i;j;k]) = phi(chf_ix[i;j;k]) + relCoef(chf_ix[i;j;k]) * (rhs(chf_ix[i;j;k]) - lphi(chf_ix[i;j;k]))
      chf_enddo
      end

      subroutine helmholtzgsrb(
     &     chf_fra1[phi],
     &     chf_const_fra1[rhs],
     &     chf_const_fra1[relcoef],
     &     chf_const_fra1[acoef],
     &     chf_const_fra1[b0],
     &     chf_const_fra1[b1],
     &     chf_const_fra1[b2],
     &     chf_const_real[alpha],
     &     chf_const_real[beta],
     &     chf_const_real[dx],
     &     chf_const_int[redBlack],
     &     chf_box[region])

      integer chf_ddecl[i;j;k]
      real_t laplphi, dx0
      integer imin,imax,indtot

      dx0 = beta/(dx * dx)

#if CH_SPACEDIM==3
      do k=CHF_LBOUND[region; 2], CHF_UBOUND[region; 2]
#endif
#if CH_SPACEDIM > 1
         do j=CHF_LBOUND[region; 1], CHF_UBOUND[region; 1]
#endif
            imin = CHF_LBOUND[region; 0]
            CHF_DTERM[indtot = imin; + j ; + k ]

            imin = imin + abs(mod(indtot + redBlack, 2))
            imax = CHF_UBOUND[region; 0]
            do i = imin, imax, 2
               laplphi = CHF_DTERM[
     &               b0(CHF_IX[i+1;j  ;k  ])*(phi(chf_ix[i+1;j  ;k  ]) - phi(chf_ix[i  ;j  ;k  ]))
     &              -b0(CHF_IX[i  ;j  ;k  ])*(phi(chf_ix[i  ;j  ;k  ]) - phi(chf_ix[i-1;j  ;k  ]));
     &              +b1(CHF_IX[i  ;j+1;k  ])*(phi(chf_ix[i  ;j+1;k  ]) - phi(chf_ix[i  ;j  ;k  ]))
     &              -b1(CHF_IX[i  ;j  ;k  ])*(phi(chf_ix[i  ;j  ;k  ]) - phi(chf_ix[i  ;j-1;k  ]));
     &              +b2(CHF_IX[i  ;j  ;k+1])*(phi(chf_ix[i  ;j  ;k+1]) - phi(chf_ix[i  ;j  ;k  ]))
     &              -b2(CHF_IX[i  ;j  ;k  ])*(phi(chf_ix[i  ;j  ;k  ]) - phi(chf_ix[i  ;j  ;k-1]))]

               laplphi = alpha*acoef(chf_ix[i;j;k])*phi(chf_ix[i;j;k]) + dx0*laplphi

               phi(chf_ix[i;j;k]) = phi(chf_ix[i;j;k]) + relcoef(chf_ix[i;j;k])*(rhs(chf_ix[i;j;k]) - laplphi)

            enddo
#if CH_SPACEDIM > 1
         enddo
#endif
#if CH_SPACEDIM==3
      enddo
#endif

      return
      end

      subroutine helmholtzapplydomainflux(
     &     chf_fra1[phi],
     &     chf_const_fra1[flux],
     &     chf_const_fra1[bco],
     &     chf_const_real[dx],
     &     chf_const_int[side],
     &     chf_const_int[dir],		                    
     &     chf_box[ghostbox])


      integer chf_ddecl[i;   j;   k   ]
      integer chf_ddecl[ioff;joff;koff]

      real_t scaledflux

      chf_dterm[
        ioff = chf_id(0,dir);
        joff = chf_id(1, dir);
        koff = chf_id(2, dir)]

c flux and phi are cell-centered but bco is face-centered. 
      if(side .eq. -1) then
         chf_multido[ghostbox; i;j;k]	       
            scaledflux         = flux(chf_ix[i+ioff; j+joff; k+koff])/bco(chf_ix[i+ioff; j+joff; k+koff]) 	 
            phi(chf_ix[i;j;k]) = phi( chf_ix[i+ioff; j+joff; k+koff]) - scaledflux*dx	 
         chf_enddo      
      else
         chf_multido[ghostbox; i;j;k]	 
            scaledflux         = flux(chf_ix[i-ioff; j-joff; k-koff])/bco(chf_ix[i; j; k]) 	 
            phi(chf_ix[i;j;k]) = phi (chf_ix[i-ioff; j-joff; k-koff]) + scaledflux*dx
         chf_enddo
      endif	 
      end

      subroutine helmholtzdirichletflux(
     &     chf_fra1[flux],
     &     chf_const_fra1[phi],
     &     chf_const_real[value],
     &     chf_const_real[dx],
     &     chf_const_int[dir],
     &     chf_const_int[side],     
     &     chf_box[cellbox])

      real_t ihdx
      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ioff;joff;koff]

      chf_dterm[
         ioff = chf_id(0,dir);
         joff = chf_id(1,dir);
         koff = chf_id(2,dir)]      

      ihdx = 2.0/dx

c Compute dphi/dn
      chf_multido[cellbox; i; j; k]
         flux(chf_ix[i;j;k]) = side * ihdx * (value - phi(chf_ix[i;j;k]))
      chf_enddo
      
      return
      end

      subroutine helmholtzmultfluxbybco(
     &     chf_fra1[flux],
     &     chf_const_fra1[bco],
     &     chf_const_int[dir],
     &     chf_const_int[side],     
     &     chf_box[cellbox])

      integer chf_ddecl[i;j;k]
      integer chf_ddecl[ioff;joff;koff]

      chf_dterm[
         ioff = chf_id(0,dir);
         joff = chf_id(1,dir);
         koff = chf_id(2,dir)]      

c Multiply by b-coefficient. Note that flux is cell-centered but bco is face-centered. 
      if(side .eq. -1) then
         chf_multido[cellbox; i; j; k]      
            flux(chf_ix[i;j;k]) = flux(chf_ix[i;j;k]) * bco(chf_ix[i;j;k])
         chf_enddo	          
      else
         chf_multido[cellbox; i; j; k]      
            flux(chf_ix[i;j;k]) = flux(chf_ix[i;j;k]) * bco(chf_ix[i+ioff;j+joff;k+koff])
         chf_enddo	    
      endif
      
      return
      end