# ====================================================================================================
# STRANG2 CLASS OPTIONS
#
# The strang2 class advances u^(n+1) = e^(0.5*A*dt)*e^(D*dt)*e^(0.5*A*dt)u^n where A is the
# advection-reaction operator and D is the diffusion operator. The diffusion scheme is always a
# second order implicit Runge-Kutta method (TGA scheme) whereas the advective schemes can be done as
# various SSP Runge-Kutta schemes. The following are supported:
#
# Method       CFL
# ---------    ---
# SSPRK(s,2)   s-1
# SSPRK(3,3)   1
# SSPRK(4,3)   2
# SSPRK(5,3)   2.650
# SSPRK(5,4)   1.508
#
# It is recommended that you stay away from the maximum theoretical CFL limits since the velocity
# may change in the course of a time step. It is usually safe to run at 90% of the theoretical maximum. 
#
# As a rule, we do not support first order Runge-Kutta schemes because they would destroy the second
# order convergence of the Strang splitting. 
#
# Note that if you use fixed time stepping then the CFL number from TimeStepper is overridden
# and taken as strang2_maxcfl, which allows you to run at a specified CFL. If you use adaptive
# stepping (development feature).
#
# If you use the auto_stages functionality, you can specify the maximum and minimum number of stages
# for the advective discretization. Order 2 is locked. 
#
# ====================================================================================================
# Main arguments
# --------------
strang2.rk_method         = 2 2     # Runge-Kutta method. First argument is stages, second is order. 
strang2.max_cfl           = 0.9     # Maximum allowed CFL number for each substep. Different for each RK method.

# ---------------------------------------------
# Development features below. For experts only.
# ---------------------------------------------
#
# -------------------------------------
# Automatic stage selection for order 2
# -------------------------------------
strang2.auto_stages       = false   # Automatic stage selection. Only works for order = 2. See explanation of usage above
strang2.auto_safety_cfl   = 0.5     # Safety factor for CFL
strang2.auto_max_stages   = 5       # Maximum number of stages
strang2.auto_min_stages   = 2       # Minium number of stages

# -----------------	  
# Adaptive stepping
# -----------------
strang2.adaptive_dt       = false   # Tune time step by using an embedded lower order scheme
strang2.compute_error     = false   # Compute the error by using an embedded Lie scheme.
strang2.fixed_order       = false   # Fix the integration order
strang2.error_norm        = 2       # Which error norm.
strang2.alpha             = 0.25    # Tuning factor for time step control
strang2.min_cfl           = 0.1     # Minimum allowed CFL number for each substep. 
strang2.min_alpha         = 0.2     # Tuning factor for time step control
strang2.max_alpha         = 1.5     # Tuning factor for time step control
strang2.safety            = 0.9     # Safety factor for adaptive step size control. Must (0,1]	
strang2.max_error         = 1.E-5   # Maximum allowed error. Only if compute_error = true	

#-----------------
# Debugging options
# -----------------
strang2.print_diagnostics = false  # Print diagnostics to pout
strang2.accept_error      = false  # Accept the embedded formula as the solution
strang2.consistent_E      = true   # Use consistent E-field computations (update in between RK stages)
strang2.consistent_rte    = true   # Use consistent RTE updates
strang2.compute_v         = true   # Compute v in between substeps. 
strang2.compute_S         = true   # Compute S in between substeps.
strang2.compute_D         = true   # Compute S in between substeps.	
strang2.do_advec_src      = true   # Turn off code functionality. Only for debugging 
strang2.do_diffusion      = true   # Turn off code functionality. Only for debugging
strang2.do_poisson        = true   # Turn off code functionality. Only for debugging
strang2.do_rte            = true   # Turn off code functionality. Only for debugging