# ====================================================================================================
# SDC CLASS OPTIONS
#
# This class uses explicit spectral deferred corrections. It can support semi-implicit schemes but
# only if all charged species velocities are parallel to E. If they are not, you should NOT be using
# the semi-implicit formulation. 
# and advection-reaction is handled explicitly.
#
# The maximum possible global order of accuracy is (p+1) where p is the number of subintervals. Each
# correction raises the order by 1 (corr_iter=0 is the first order solution). To reach the maximum
# possible order, you should perform p correction iterations. 
#
# 
# ====================================================================================================
sdc.verbosity        = -1      # Class verbosity
sdc.solver_verbosity = -1      # Individual solver verbosities
sdc.min_dt           = 0.      # Minimum permitted time step
sdc.max_dt           = 1.E99   # Maximum permitted time step
sdc.cfl              = 0.5     # CFL number
sdc.relax_time       = 1.0     # Relaxation time constant
sdc.semi_implicit    = false   # Use semi-implicit formulation
sdc.source_comp      = interp  # Interpolated 'interp' or cell-average 'cell_ave' for source computations
sdc.freeze_photoi    = false   # If true, compute photoionization in 1st sweep only (freeze them for later sweeps)

# ------------------------------------
# Nodes, subintervals, and corrections
# ------------------------------------
sdc.quad_nodes   = lobatto     # Nodes to be used for quadrature. 'lobatto', 'uniform', or 'chebyshev'
sdc.subintervals = 1           # Number of subintervals. This will be the maximum possible order.
sdc.corr_iter    = 1           # Number of iterations of the correction equation. Should be (subintervals-1)
                                 # for maximum order

# Adaptive time stepping
# ---------------------------------------------------------
sdc.print_report    = false    # Print report with error and stuff	
sdc.adaptive_dt     = false    # Use adaptive time stepping
sdc.error_norm      = 2        # Error norm (0 = Linf)
sdc.min_corr        = 0        # Minimum number of corrections
sdc.max_retries     = 100      # Maximum number of tries (for step rejection)
sdc.max_growth      = 1.2      # Maximum permissible time step growth
sdc.decrease_safety = 0.9      # Fudge factor when we decrease the time step. 
sdc.min_cfl         = 0.1      # Minimum CFL
sdc.max_cfl         = 0.75     # Maximum CFL
sdc.max_error       = 1.E-3    # Error threshold
sdc.error_index     = -1       # Error index. If -1, evaluate all CDR solvers	
sdc.safety          = 0.75     # Safety factor for time stepping

# ---------------------------------------------------------	
# Debugging options
# ---------------------------------------------------------
sdc.fast_rte          = 1      # Solve RTE every this time steps
sdc.fast_poisson      = 1      # Solve Poisson every this time steps	
sdc.consistent_E      = true   # Use consistent E-field computations (update in between RK stages)
sdc.consistent_rte    = true   # Use consistent RTE updates
sdc.compute_v         = true   # Compute v in between substeps. 
sdc.compute_S         = true   # Compute S in between substeps.
sdc.compute_D         = true   # Compute S in between substeps.
sdc.do_advec_src      = true   # Turn off code functionality. Only for debugging 
sdc.do_diffusion      = true   # Turn off code functionality. Only for debugging
sdc.do_poisson        = true   # Turn off code functionality. Only for debugging
sdc.do_rte            = true   # Turn off code functionality. Only for debugging
sdc.profile_steps     = false  # Profile time steps with order, accuracy, cfl, etc.

# ---------------------
# Advection extrapolation. Currently does NOT work with subcycling (but I'm working on it...)
# ---------------------
sdc.extrap_advect = true      # Time extrapolate with source and diffusion in advection step
