# ====================================================================================================
# POTENTIAL CURVE
# ====================================================================================================
air_streamer.potential = 5E3
air_streamer.basename  = pout

# ====================================================================================================
# AMR_MESH OPTIONS
# ====================================================================================================
AmrMesh.lo_corner       = -2E-2 -2E-2 -1E-2 # Low corner of problem domain
AmrMesh.hi_corner       =  2E-2 -2E-2  1E-2 # High corner of problem domain
AmrMesh.verbosity       = -1          # Controls verbosity. 
AmrMesh.coarsest_domain = 32 32 16    # Number of cells on coarsest domain
AmrMesh.max_amr_depth   = 1           # Maximum amr depth
AmrMesh.max_sim_depth   = -1          # Maximum simulation depth
AmrMesh.fill_ratio      = 1.0         # Fill ratio for grid generation
AmrMesh.buffer_size     = 2           # Number of cells between grid levels
AmrMesh.grid_algorithm  = br          # Berger-Rigoustous 'br' or 'tiled' for the tiled algorithm
AmrMesh.box_sorting     = morton      # 'none', 'shuffle', 'morton'
AmrMesh.blocking_factor = 8           # Default blocking factor (16 in 3D)
AmrMesh.max_box_size    = 16          # Maximum allowed box size
AmrMesh.max_ebis_box    = 16          # Maximum allowed box size
AmrMesh.ref_rat         = 2 2 2 2 2 2 # Refinement ratios
AmrMesh.num_ghost       = 2           # Number of ghost cells. Default is 3
AmrMesh.lsf_ghost       = 3           # Number of ghost cells when writing level-set to grid
AmrMesh.eb_ghost        = 4           # Set number of of ghost cells for EB stuff
AmrMesh.mg_interp_order  = 2           # Multigrid interpolation order
AmrMesh.mg_interp_radius = 2           # Multigrid interpolation radius
AmrMesh.mg_interp_weight = 2           # Multigrid interpolation weight (for least squares)
AmrMesh.centroid_sten   = linear      # Centroid interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.eb_sten         = pwl         # EB interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.redist_radius   = 1           # Redistribution radius for hyperbolic conservation laws

# ====================================================================================================
# DRIVER OPTIONS
# ====================================================================================================
Driver.verbosity                       = 2                # Engine verbosity
Driver.geometry_generation             = chombo-discharge # Grid generation method, 'chombo-discharge' or 'chombo'
Driver.geometry_scan_level             = 0                # Geometry scan level for chombo-discharge geometry generator
Driver.ebis_memory_load_balance        = false            # If using Chombo geo-gen, use memory as loads for EBIS generation  
Driver.plot_interval                   = 10               # Plot interval
Driver.checkpoint_interval             = 10               # Checkpoint interval
Driver.regrid_interval                 = 10               # Regrid interval
Driver.write_regrid_files              = false            # Write regrid files or not.
Driver.write_restart_files             = false            # Write restart files or not
Driver.initial_regrids                 = 0                # Number of initial regrids
Driver.do_init_load_balance            = false            # If true, load balance the first step in a fresh simulation.
Driver.start_time                      = 0                # Start time (fresh simulations only)
Driver.stop_time                       = 10.E-0           # Stop time
Driver.max_steps                       = 100              # Maximum number of steps
Driver.geometry_only                   = false            # Special option that ONLY plots the geometry
Driver.write_memory                    = false            # Write MPI memory report
Driver.write_loads                     = false            # Write (accumulated) computational loads
Driver.output_directory                = ./               # Output directory
Driver.output_names                    = simulation       # Simulation output names
Driver.max_plot_depth                  = -1               # Restrict maximum plot depth (-1 => finest simulation level)
Driver.max_chk_depth                   = -1               # Restrict chechkpoint depth (-1 => finest simulation level)	
Driver.num_plot_ghost                  = 1                # Number of ghost cells to include in plots
Driver.plt_vars                        = 0                # 'tags', 'mpi_rank', 'levelset'
Driver.restart                         = 0                # Restart step (less or equal to 0 implies fresh simulation)
Driver.allow_coarsening                = true             # Allows removal of grid levels according to CellTagger
Driver.grow_geo_tags                   = 2                # How much to grow tags when using geometry-based refinement. 
Driver.refine_angles                   = 15.              # Refine cells if angle between elements exceed this value.
Driver.refine_electrodes               = 0                # Refine electrode surfaces. -1 => equal to refine_geometry
Driver.refine_dielectrics              = 0                # Refine dielectric surfaces. -1 => equal to refine_geometry


# ====================================================================================================
# FIELD_SOLVER_MULTIGRID CLASS OPTIONS (MULTIFLUID GMG SOLVER SETTINGS)
# ====================================================================================================
FieldSolverMultigrid.verbosity         = -1                # Class verbosity
FieldSolverMultigrid.jump_bc           = natural           # Jump BC type ('natural' or 'saturation_charge')
FieldSolverMultigrid.bc.x.lo      = dirichlet 0.0     # Bc type.
FieldSolverMultigrid.bc.x.hi      = dirichlet 0.0     # Bc type.
FieldSolverMultigrid.bc.y.lo      = dirichlet 0.0     # Bc type.
FieldSolverMultigrid.bc.y.hi      = dirichlet 0.0     # Bc type.
FieldSolverMultigrid.bc.z.lo      = dirichlet 0.0     # Bc type.
FieldSolverMultigrid.bc.z.hi      = neumann 0.0          # Bc type.
FieldSolverMultigrid.plt_vars     = phi rho E res     # Plot variables. Possible vars are 'phi', 'rho', 'E', 'res'
FieldSolverMultigrid.use_regrid_slopes = true              # Use slopes when regridding or not
FieldSolverMultigrid.kappa_source = true              # Volume weighted space charge density or not (depends on algorithm)
FieldSolverMultigrid.filter            = 0                 # Number of filterings after Poisson solve

FieldSolverMultigrid.gmg_verbosity     = -1        # GMG verbosity
FieldSolverMultigrid.gmg_pre_smooth    = 12        # Number of relaxations in downsweep
FieldSolverMultigrid.gmg_post_smooth   = 12        # Number of relaxations in upsweep
FieldSolverMultigrid.gmg_bott_smooth   = 12        # NUmber of relaxations before dropping to bottom solver
FieldSolverMultigrid.gmg_min_iter      = 5         # Minimum number of iterations
FieldSolverMultigrid.gmg_max_iter      = 32        # Maximum number of iterations
FieldSolverMultigrid.gmg_exit_tol      = 1.E-10    # Residue tolerance
FieldSolverMultigrid.gmg_exit_hang     = 0.2       # Solver hang
FieldSolverMultigrid.gmg_min_cells     = 16        # Bottom drop
FieldSolverMultigrid.gmg_drop_order    = 0                 # Drop stencil order to 1 if domain is coarser than this.
FieldSolverMultigrid.gmg_bc_order      = 2         # Boundary condition order for multigrid
FieldSolverMultigrid.gmg_bc_weight     = 2         # Boundary condition weights (for least squares)
FieldSolverMultigrid.gmg_jump_order    = 2         # Boundary condition order for jump conditions
FieldSolverMultigrid.gmg_jump_weight   = 2         # Boundary condition weight for jump conditions (for least squares)
FieldSolverMultigrid.gmg_bottom_solver = bicgstab  # Bottom solver type. 'simple', 'bicgstab', or 'gmres'
FieldSolverMultigrid.gmg_cycle         = vcycle    # Cycle type. Only 'vcycle' supported for now
FieldSolverMultigrid.gmg_smoother      = red_black # Relaxation type. 'jacobi', 'multi_color', or 'red_black'

# ====================================================================================================
# CDR_GDNV SOLVER SETTINGS
# ----------------------------------------------------------------------------------------------------
CdrGodunov.seed                 = -1                      # Seed. Random seed with seed < 0
CdrGodunov.bc.x.lo               = wall                    # 'data', 'function', 'wall', or 'outflow'
CdrGodunov.bc.x.hi               = wall                    # 'data', 'function', 'wall', or 'outflow'
CdrGodunov.bc.y.lo               = wall                    # 'data', 'function', 'wall', or 'outflow'
CdrGodunov.bc.y.hi               = wall                    # 'data', 'function', 'wall', or 'outflow'
CdrGodunov.bc.z.lo               = wall                    # 'data', 'function', 'wall', or 'outflow'
CdrGodunov.bc.z.hi               = wall                    # 'data', 'function', 'wall', or 'outflow'
CdrGodunov.limit_slopes         = true                    # Use slope-limiters for godunov
CdrGodunov.plt_vars             = phi vel src dco ebflux  # Plot variables. Options are 'phi', 'vel', 'dco', 'src'
CdrGodunov.extrap_source        = true                    # Flag for including source term for time-extrapolation
CdrGodunov.plot_mode            = density                 # Plot densities 'density' or particle numbers ('numbers')
CdrGodunov.blend_conservation   = true                    # Turn on/off blending with nonconservative divergenceo
CdrGodunov.which_redistribution  = volume                  # Redistribution type. 'volume', 'mass', or 'none' (turned off)
CdrGodunov.use_regrid_slopes     = false                   # Turn on/off slopes when regridding
CdrGodunov.gmg_verbosity        = -1                      # GMG verbosity
CdrGodunov.gmg_pre_smooth       = 6                       # Number of relaxations in GMG downsweep
CdrGodunov.gmg_post_smooth      = 6                       # Number of relaxations in upsweep
CdrGodunov.gmg_bott_smooth      = 6                       # NUmber of relaxations before dropping to bottom solver
CdrGodunov.gmg_min_iter         = 5                       # Minimum number of iterations
CdrGodunov.gmg_max_iter         = 32                      # Maximum number of iterations
CdrGodunov.gmg_exit_tol         = 1.E-8                   # Residue tolerance
CdrGodunov.gmg_exit_hang        = 0.2                     # Solver hang
CdrGodunov.gmg_min_cells        = 2                       # Bottom drop
CdrGodunov.gmg_bottom_solver    = bicgstab                # Bottom solver type. Valid options are 'simple' and 'bicgstab'
CdrGodunov.gmg_cycle            = vcycle                  # Cycle type. Only 'vcycle' supported for now
CdrGodunov.gmg_smoother          = red_black               # Relaxation type. 'jacobi', 'multi_color', or 'red_black'


# ====================================================================================================
# EDDINGTON_SP1 CLASS OPTIONS
# ====================================================================================================
EddingtonSP1.verbosity           = -1           # Solver verbosity
EddingtonSP1.stationary          = true      # Stationary solver
EddingtonSP1.reflectivity        = 0.        # Reflectivity
EddingtonSP1.kappa_scale         = false        # Kappa scale source or not (depends on algorithm)
EddingtonSP1.plt_vars            = phi src   # Plot variables. Available are 'phi' and 'src'
EddingtonSP1.use_regrid_slopes   = true         # Slopes on/off when regridding
EddingtonSP1.gmg_verbosity       = -1        # GMG verbosity
EddingtonSP1.gmg_pre_smooth      = 8         # Number of relaxations in downsweep
EddingtonSP1.gmg_post_smooth     = 8         # Number of relaxations in upsweep
EddingtonSP1.gmg_bott_smooth     = 8         # NUmber of relaxations before dropping to bottom solver
EddingtonSP1.gmg_min_iter        = 5         # Minimum number of iterations
EddingtonSP1.gmg_max_iter        = 32        # Maximum number of iterations
EddingtonSP1.gmg_exit_tol        = 1.E-6     # Residue tolerance
EddingtonSP1.gmg_exit_hang       = 0.2       # Solver hang
EddingtonSP1.gmg_min_cells       = 2         # Bottom drop
EddingtonSP1.gmg_bottom_solver   = bicgstab     # Bottom solver type. Valid options are 'simple <number>' and 'bicgstab'
EddingtonSP1.gmg_cycle           = vcycle    # Cycle type. Only 'vcycle' supported for now
EddingtonSP1.gmg_ebbc_weight     = 2            # EBBC weight (only for Dirichlet)
EddingtonSP1.gmg_ebbc_order      = 2            # EBBC order (only for Dirichlet)
EddingtonSP1.gmg_smoother        = red_black    # Relaxation type. 'jacobi', 'red_black', or 'multi_color'
EddingtonSP1.ebbc                = larsen 0.0     # Bc on embedded boundaries. 
EddingtonSP1.bc.x.lo             = larsen 0.0     # Boundary on domain. 'neumann' or 'robin'
EddingtonSP1.bc.x.hi             = larsen 0.0     # Boundary on domain. 'neumann' or 'robin'              
EddingtonSP1.bc.y.lo             = larsen 0.0     # Boundary on domain. 'neumann' or 'robin'
EddingtonSP1.bc.y.hi             = larsen 0.0     # Boundary on domain. 'neumann' or 'robin'
EddingtonSP1.bc.z.lo             = larsen 0.0     # Boundary on domain. 'neumann' or 'robin'
EddingtonSP1.bc.z.hi             = larsen 0.0     # Boundary on domain. 'neumann' or 'robin'		

# ====================================================================================================
# GEO_COARSENER CLASS OPTIONS
# ====================================================================================================
GeoCoarsener.num_boxes   = 1            # Number of coarsening boxes (0 = don't coarsen)
GeoCoarsener.box1_lo     = -1 -1 500E-6 # Remove irregular cell tags 
GeoCoarsener.box1_hi     =  1 1 1       # between these two corners
GeoCoarsener.box1_lvl    = 2            # up to this level
GeoCoarsener.box1_inv    = false        # Remove except inside box (true)

# ====================================================================================================
# ROD_DIELECTRIC CLASS OPTIONS
# ====================================================================================================
RodDielectric.electrode.on              = true          # Use electrode or not
RodDielectric.electrode.endpoint1       = 0 0 0         # One endpoint
RodDielectric.electrode.endpoint2       = 0 0 1         # Other endpoint
RodDielectric.electrode.radius          = 250E-6        # Electrode radius
RodDielectric.electrode.live            = true          # Live or not

RodDielectric.dielectric.on             = false         # Use dielectric or not
RodDielectric.dielectric.shape          = perlin_box    # 'plane', 'box', 'perlin_box', 'sphere'
RodDielectric.dielectric.permittivity   = 4             # Dielectric permittivity

# Subsettings for 'plane'
RodDielectric.plane.point               = 0 0 0         # Plane point
RodDielectric.plane.normal              = 0 0 1         # Plane normal vector (outward)

# Subsettings for 'box'
RodDielectric.box.lo_corner             = 0 0 0         # Low corner
RodDielectric.box.hi_corner             = 1 1 1         # Hi corner
RodDielectric.box.curvature             = 0.1

# Subsettings for 'perlin_box'
RodDielectric.perlin_box.point          = 0  0 -0.5     # Slab center-point (side with roughness)
RodDielectric.perlin_box.normal         = 0  0  1       # Slab normal
RodDielectric.perlin_box.curvature      = 0.1           # Slab rounding radius
RodDielectric.perlin_box.dimensions     = 1  1  1       # Slab dimensions
RodDielectric.perlin_box.noise_amp      = 0.1           # Noise amplitude
RodDielectric.perlin_box.noise_octaves  = 1             # Noise octaves
RodDielectric.perlin_box.noise_persist  = 0.5           # Octave persistence
RodDielectric.perlin_box.noise_freq     = 1 1 1         # Noise frequency
RodDielectric.perlin_box.noise_reseed   = false         # Reseed noise or not

# Subsettings for sphere
RodDielectric.sphere.center             = 0 0 0         # Low corner
RodDielectric.sphere.radius             = 0.5           # Radius


# ====================================================================================================
# IMEX_SDC CLASS OPTIONS
#
# This class uses semi-implicit spectral deferred corrections. Diffusion is handled implicitly,
# and advection-reaction is handled explicitly.
#
# The maximum possible global order of accuracy is (p+1) where p is the number of subintervals. Each
# correction raises the order by 1 (corr_iter=0 is the first order solution). To reach the maximum
# possible order, you should perform p correction iterations. 
#
# 
# ====================================================================================================
CdrPlasmaImExSdcStepper.verbosity        = -1      # Class verbosity
CdrPlasmaImExSdcStepper.solver_verbosity = -1      # Individual solver verbosities
CdrPlasmaImExSdcStepper.fast_rte         = 1       # Solve RTE every this time steps
CdrPlasmaImExSdcStepper.fast_poisson     = 1       # Solve Poisson every this time steps	
CdrPlasmaImExSdcStepper.min_dt           = 0.      # Minimum permitted time step
CdrPlasmaImExSdcStepper.max_dt           = 1.E99   # Maximum permitted time step
CdrPlasmaImExSdcStepper.cfl              = 0.9     # CFL number
CdrPlasmaImExSdcStepper.relax_time       = 1.0     # Relaxation time constant
CdrPlasmaImExSdcStepper.source_comp      = interp  # Interpolated 'interp' or cell-average 'cell_ave' for source computations

# ------------------------------------
# Nodes, subintervals, and corrections
# ------------------------------------
CdrPlasmaImExSdcStepper.quad_nodes   = lobatto     # Nodes to be used for quadrature. 'lobatto', 'uniform', or 'chebyshev'
CdrPlasmaImExSdcStepper.subintervals = 1           # Number of subintervals. This will be the maximum possible order.
CdrPlasmaImExSdcStepper.corr_iter    = 0           # Number of iterations of the correction equation. Should be (subintervals-1)
                                    # for maximum order

# ---------------------------------------------------------	
# Diffusive coupling
#
# This defines the weak coupling used for the implicit diffusion advance. 
# ---------------------------------------------------------
CdrPlasmaImExSdcStepper.diffusive_coupling = weak  # Diffusion coupling, either 'weak' or 'strong'
CdrPlasmaImExSdcStepper.use_tga            = false # Use second order diffusion per substep ('true')
CdrPlasmaImExSdcStepper.num_diff_corr      = 0     # Number of corrections for 'strong'

# Adaptive time stepping
# ---------------------------------------------------------
CdrPlasmaImExSdcStepper.print_report    = false    # Print report with error and stuff	
CdrPlasmaImExSdcStepper.adaptive_dt     = false    # Use adaptive time stepping
CdrPlasmaImExSdcStepper.error_norm      = 0        # Error norm (0 = Linf)
CdrPlasmaImExSdcStepper.min_corr        = 1        # Minimum number of corrections
CdrPlasmaImExSdcStepper.max_retries     = 100      # Maximum number of tries (for step rejection)
CdrPlasmaImExSdcStepper.max_growth      = 1.2      # Maximum permissible time step growth
CdrPlasmaImExSdcStepper.decrease_safety = 0.9      # Fudge factor when we decrease the time step. 
CdrPlasmaImExSdcStepper.min_cfl         = 0.1      # Minimum CFL
CdrPlasmaImExSdcStepper.max_cfl         = 0.75     # Maximum CFL
CdrPlasmaImExSdcStepper.max_error       = 1.E-4    # Error threshold
CdrPlasmaImExSdcStepper.error_index     = -1       # Error index. If -1, evaluate all CDR solvers	
CdrPlasmaImExSdcStepper.safety          = 0.75     # Safety factor for time stepping

# ---------------------------------------------------------	
# "Asymptotic preserving". Development feature. 
# ---------------------------------------------------------	
CdrPlasmaImExSdcStepper.use_AP        = false      # Turn on the "asymptotic preserving" feature.

# ---------------------------------------------------------	
# Debugging options
# ---------------------------------------------------------
CdrPlasmaImExSdcStepper.consistent_E      = true   # Use consistent E-field computations (update in between RK stages)
CdrPlasmaImExSdcStepper.consistent_rte    = true   # Use consistent RTE updates
CdrPlasmaImExSdcStepper.compute_v         = true   # Compute v in between substeps. 
CdrPlasmaImExSdcStepper.compute_S         = true   # Compute S in between substeps.
CdrPlasmaImExSdcStepper.compute_D         = true   # Compute S in between substeps.
CdrPlasmaImExSdcStepper.do_advec_src      = true   # Turn off code functionality. Only for debugging 
CdrPlasmaImExSdcStepper.do_diffusion      = true   # Turn off code functionality. Only for debugging
CdrPlasmaImExSdcStepper.do_poisson        = true   # Turn off code functionality. Only for debugging
CdrPlasmaImExSdcStepper.do_rte            = true   # Turn off code functionality. Only for debugging
CdrPlasmaImExSdcStepper.profile_steps     = false  # Profile time steps with order, accuracy, cfl, etc.

# ---------------------
# Advection extrapolation. Currently does NOT work with subcycling (but I'm working on it...)
# ---------------------
CdrPlasmaImExSdcStepper.extrap_advect = true      # Time extrapolate with source and diffusion in advection step


# ====================================================================================================
# AIR3_BOURDON CLASS OPTIONS
# ====================================================================================================	
CdrPlasmaAir3Bourdon.transport_file      = transport_data.txt              # Transport file
CdrPlasmaAir3Bourdon.uniform_tables      = 100    	                   #  Converted # of points in transport file
CdrPlasmaAir3Bourdon.pressure            = 1.0                             # Gas pressure
CdrPlasmaAir3Bourdon.temperature         = 300                             # Gas temperature
CdrPlasmaAir3Bourdon.use_alpha_corr      = false                           # Soloviev alpha correction	
CdrPlasmaAir3Bourdon.mobile_electrons    = true                            # Mobile electrons or not
CdrPlasmaAir3Bourdon.diffusive_electrons = true                            # Diffusive electrons or not
CdrPlasmaAir3Bourdon.mobile_ions         = false                           # Mobile ions or not
CdrPlasmaAir3Bourdon.diffusive_ions      = false                           # Diffusive ions or not
CdrPlasmaAir3Bourdon.ion_mobility        = 2.E-4                           # Ion mobility

CdrPlasmaAir3Bourdon.uniform_density       = 1.E10                         # Uniform density
CdrPlasmaAir3Bourdon.seed_density          = 1.E17                         # Gaussian seed density
CdrPlasmaAir3Bourdon.seed_radius           = 250E-6                        # Gaussian seed radius
CdrPlasmaAir3Bourdon.seed_position         = 0 0 0                         # Gaussian seed position

CdrPlasmaAir3Bourdon.electrode_townsend2           = 1.E-6                 # SEE on electrodes
CdrPlasmaAir3Bourdon.dielectric_townsend2          = 1.E-6                 # SEE on dielectrics
CdrPlasmaAir3Bourdon.electrode_quantum_efficiency  = 1.E-6                 # SEE on electrodes
CdrPlasmaAir3Bourdon.dielectric_quantum_efficiency = 1.E-6                 # SEE on dielectrics

CdrPlasmaAir3Bourdon.quenching_pressure            = 0.03947               # Quenching pressure for photo-emission (atm)
CdrPlasmaAir3Bourdon.excitation_efficiency         = 0.6                   # Impact excitation efficiency
CdrPlasmaAir3Bourdon.photoionization_efficiency    = 0.1                   # Photo-ionization efficiency
CdrPlasmaAir3Bourdon.Photon1_A_coeff               = 1.12E-4               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon1_lambda_coeff          = 4.15E-2               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon2_A_coeff               = 2.88E-2               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon2_lambda_coeff          = 1.09E-1               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon3_A_coeff               = 2.76E-1               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon3_lambda_coeff          = 6.69E-1               # Parameters from Bourdon et. al photoionization model

CdrPlasmaAir3Bourdon.domain_bc_x_lo = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_x_hi = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_y_lo = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_y_hi = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_z_lo = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_z_hi = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'

# ====================================================================================================
# STREAMER_TAGGER CLASS OPTIONS
# ====================================================================================================
CdrPlasmaStreamerTagger.verbosity         = -1           # Verbosity
CdrPlasmaStreamerTagger.num_tag_boxes     = 0            # Number of allowed tag boxes (0 = tags allowe everywhere)
CdrPlasmaStreamerTagger.tag_box1_lo       = 0.0 0.0 0.0  # Only allow tags that fall between
CdrPlasmaStreamerTagger.tag_box1_hi       = 0.0 0.0 0.0  # these two corners
CdrPlasmaStreamerTagger.buffer            = 4            # Grow tagged cells

CdrPlasmaStreamerTagger.refine_curvature  = 10.0         # Curvature refinement
CdrPlasmaStreamerTagger.coarsen_curvature = 10.0         # Curvature coarsening	
CdrPlasmaStreamerTagger.refine_alpha      = 1.0          # Set alpha refinement. Lower  => More mesh
CdrPlasmaStreamerTagger.coarsen_alpha     = 0.1          # Set alpha coarsening. Higher => Less mesh
CdrPlasmaStreamerTagger.max_coarsen_lvl   = 0            # Set max coarsening depth
