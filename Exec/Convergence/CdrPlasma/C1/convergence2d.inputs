# ====================================================================================================
# Voltage curve
# ====================================================================================================
RodPlane.voltage   = 2E3
RodPlane.basename  = pout

# ====================================================================================================
# AmrMesh class options
# ====================================================================================================
AmrMesh.lo_corner        = -0.5E-3    0    # Low corner of problem domain
AmrMesh.hi_corner        =  0.5E-3    1E-3 # High corner of problem domain
AmrMesh.verbosity        = -1          # Controls verbosity. 
AmrMesh.coarsest_domain  = 128 128     # Number of cells on coarsest domain
AmrMesh.max_amr_depth    = 0           # Maximum amr depth
AmrMesh.max_sim_depth    = -1          # Maximum simulation depth
AmrMesh.fill_ratio       = 1.0         # Fill ratio for grid generation
AmrMesh.buffer_size      = 2           # Number of cells between grid levels
AmrMesh.grid_algorithm   = tiled       # Berger-Rigoustous 'br' or 'tiled' for the tiled algorithm
AmrMesh.box_sorting      = morton      # 'none', 'shuffle', 'morton'
AmrMesh.blocking_factor  = 16          # Blocking factor. 
AmrMesh.max_box_size     = 16          # Maximum allowed box size
AmrMesh.max_ebis_box     = 16          # Maximum allowed box size for EBIS generation. 
AmrMesh.ref_rat          = 2 2 2 2 2 2 # Refinement ratios (mixed ratios are allowed). 
AmrMesh.num_ghost        = 2           # Number of ghost cells. 
AmrMesh.lsf_ghost        = 2           # Number of ghost cells when writing level-set to grid
AmrMesh.eb_ghost         = 4           # Set number of of ghost cells for EB stuff
AmrMesh.mg_interp_order  = 2           # Multigrid interpolation order
AmrMesh.mg_interp_radius = 2           # Multigrid interpolation radius
AmrMesh.mg_interp_weight = 2           # Multigrid interpolation weight (for least squares)
AmrMesh.centroid_sten    = lsq      # Centroid interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.eb_sten          = lsq         # EB interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.redist_radius    = 1           # Redistribution radius for hyperbolic conservation laws

# ====================================================================================================
# Driver class options
# ====================================================================================================
Driver.verbosity                       = 2                # Engine verbosity
Driver.geometry_generation             = chombo-discharge # Grid generation method, 'chombo-discharge' or 'chombo'
Driver.geometry_scan_level             = 0                # Geometry scan level for chombo-discharge geometry generator
Driver.ebis_memory_load_balance        = false            # If using Chombo geo-gen, use memory as loads for EBIS generation  
Driver.plot_interval                   = 10               # Plot interval
Driver.checkpoint_interval             = 10               # Checkpoint interval
Driver.regrid_interval                 = 10               # Regrid interval
Driver.write_regrid_files              = false            # Write regrid files or not.
Driver.write_restart_files             = false            # Write restart files or not
Driver.initial_regrids                 = 0                # Number of initial regrids
Driver.do_init_load_balance            = false            # If true, load balance the first step in a fresh simulation.
Driver.start_time                      = 0                # Start time (fresh simulations only)
Driver.stop_time                       = 1.E-13           # Stop time
Driver.max_steps                       = 1000             # Maximum number of steps
Driver.geometry_only                   = false            # Special option that ONLY plots the geometry
Driver.write_memory                    = false            # Write MPI memory report
Driver.write_loads                     = false            # Write (accumulated) computational loads
Driver.output_directory                = ./               # Output directory
Driver.output_names                    = simulation       # Simulation output names
Driver.max_plot_depth                  = -1               # Restrict maximum plot depth (-1 => finest simulation level)
Driver.max_chk_depth                   = -1               # Restrict chechkpoint depth (-1 => finest simulation level)	
Driver.num_plot_ghost                  = 1                # Number of ghost cells to include in plots
Driver.plt_vars                        = 0                # 'tags', 'mpi_rank', 'levelset'
Driver.restart                         = 0                # Restart step (less or equal to 0 implies fresh simulation)
Driver.allow_coarsening                = true             # Allows removal of grid levels according to CellTagger
Driver.grow_geo_tags                   = 4                # How much to grow tags when using geometry-based refinement. 
Driver.refine_angles                   = 15               # Refine cells if angle between elements exceed this value.
Driver.refine_electrodes               = 3                # Refine electrode surfaces. -1 => equal to refine_geometry
Driver.refine_dielectrics              = 0                # Refine dielectric surfaces. -1 => equal to refine_geometry

# ====================================================================================================
# FieldSolverMultigrid class options
# ====================================================================================================
FieldSolverMultigrid.verbosity         = -1                # Class verbosity
FieldSolverMultigrid.jump_bc           = natural           # Jump BC type ('natural' or 'saturation_charge')
FieldSolverMultigrid.bc.x.lo           = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.x.hi           = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.y.lo           = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.y.hi           = neumann   0.0     # Bc type (see docs)
FieldSolverMultigrid.plt_vars          = phi rho E         # Plot variables: 'phi', 'rho', 'E', 'res', 'perm', 'sigma'
FieldSolverMultigrid.use_regrid_slopes = true              # Use slopes when regridding or not
FieldSolverMultigrid.kappa_source      = true              # Volume weighted space charge density or not (depends on algorithm)
FieldSolverMultigrid.filter_rho        = 0                 # Number of filterings of space charge before Poisson solve
FieldSolverMultigrid.filter_potential  = 0                 # Number of filterings of potential after Poisson solve

FieldSolverMultigrid.gmg_verbosity     = 10                # GMG verbosity
FieldSolverMultigrid.gmg_pre_smooth    = 12                # Number of relaxations in downsweep
FieldSolverMultigrid.gmg_post_smooth   = 12                # Number of relaxations in upsweep
FieldSolverMultigrid.gmg_bott_smooth   = 12                # Number of at bottom level (before dropping to bottom solver)
FieldSolverMultigrid.gmg_min_iter      = 5                 # Minimum number of iterations
FieldSolverMultigrid.gmg_max_iter      = 32                # Maximum number of iterations
FieldSolverMultigrid.gmg_exit_tol      = 1.E-10            # Residue tolerance
FieldSolverMultigrid.gmg_exit_hang     = 0.2               # Solver hang
FieldSolverMultigrid.gmg_min_cells     = 16                 # Bottom drop
FieldSolverMultigrid.gmg_drop_order    = 0                 # Drop stencil order to 1 if domain is coarser than this.
FieldSolverMultigrid.gmg_bc_order      = 2                 # Boundary condition order for multigrid
FieldSolverMultigrid.gmg_bc_weight     = 2                 # Boundary condition weights (for least squares)
FieldSolverMultigrid.gmg_jump_order    = 2                 # Boundary condition order for jump conditions
FieldSolverMultigrid.gmg_jump_weight   = 2                 # Boundary condition weight for jump conditions (for least squares)
FieldSolverMultigrid.gmg_bottom_solver = bicgstab          # Bottom solver type. 'simple', 'bicgstab', or 'gmres'
FieldSolverMultigrid.gmg_cycle         = vcycle            # Cycle type. Only 'vcycle' supported for now. 
FieldSolverMultigrid.gmg_smoother      = red_black         # Relaxation type. 'jacobi', 'multi_color', or 'red_black'


# ====================================================================================================
# CdrGodunov solver settings
# ====================================================================================================
CdrGodunov.seed                  = -1                      # Seed. Random seed with seed < 0
CdrGodunov.bc.x.lo               = data                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.bc.x.hi               = data                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.bc.y.lo               = data                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.bc.y.hi               = data                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.limit_slopes          = true                    # Use slope-limiters for godunov
CdrGodunov.plt_vars              = phi vel src dco ebflux  # Plot variables. Options are 'phi', 'vel', 'dco', 'src'
CdrGodunov.extrap_source         = false                   # Flag for including source term for time-extrapolation
CdrGodunov.plot_mode             = density                 # Plot densities 'density' or particle numbers ('numbers')
CdrGodunov.blend_conservation    = true                    # Turn on/off blending with nonconservative divergenceo
CdrGodunov.which_redistribution  = volume                  # Redistribution type. 'volume', 'mass', or 'none' (turned off)
CdrGodunov.use_regrid_slopes     = true                    # Turn on/off slopes when regridding
CdrGodunov.gmg_verbosity         = -1                      # GMG verbosity
CdrGodunov.gmg_pre_smooth        = 12                      # Number of relaxations in GMG downsweep
CdrGodunov.gmg_post_smooth       = 12                      # Number of relaxations in upsweep
CdrGodunov.gmg_bott_smooth       = 12                      # Number of relaxations before dropping to bottom solver
CdrGodunov.gmg_min_iter          = 5                       # Minimum number of iterations
CdrGodunov.gmg_max_iter          = 32                      # Maximum number of iterations
CdrGodunov.gmg_exit_tol          = 1.E-10                  # Residue tolerance
CdrGodunov.gmg_exit_hang         = 0.2                     # Solver hang
CdrGodunov.gmg_min_cells         = 16                      # Bottom drop
CdrGodunov.gmg_bottom_solver     = bicgstab                # Bottom solver type. Valid options are 'simple' and 'bicgstab'
CdrGodunov.gmg_cycle             = vcycle                  # Cycle type. Only 'vcycle' supported for now
CdrGodunov.gmg_smoother          = red_black               # Relaxation type. 'jacobi', 'multi_color', or 'red_black'


# ====================================================================================================
# EddingtonSP1 class options
# ====================================================================================================
EddingtonSP1.verbosity           = -1           # Solver verbosity
EddingtonSP1.stationary          = true         # Stationary solver
EddingtonSP1.reflectivity        = 0.           # Reflectivity
EddingtonSP1.kappa_scale         = true         # Kappa scale source or not (depends on algorithm)
EddingtonSP1.plt_vars            = phi src      # Plot variables. Available are 'phi' and 'src'
EddingtonSP1.use_regrid_slopes   = true         # Slopes on/off when regridding

EddingtonSP1.ebbc                = larsen 0.0   # Bc on embedded boundaries
EddingtonSP1.bc.x.lo             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.x.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.y.lo             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.y.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.lo             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.hi             = larsen 0.0   # Boundary on domain. 'neumann' or 'larsen'

EddingtonSP1.gmg_verbosity       = -1           # GMG verbosity
EddingtonSP1.gmg_pre_smooth      = 8            # Number of relaxations in downsweep
EddingtonSP1.gmg_post_smooth     = 8            # Number of relaxations in upsweep
EddingtonSP1.gmg_bott_smooth     = 8            # NUmber of relaxations before dropping to bottom solver
EddingtonSP1.gmg_min_iter        = 5            # Minimum number of iterations
EddingtonSP1.gmg_max_iter        = 32           # Maximum number of iterations
EddingtonSP1.gmg_exit_tol        = 1.E-6        # Residue tolerance
EddingtonSP1.gmg_exit_hang       = 0.2          # Solver hang
EddingtonSP1.gmg_min_cells       = 16           # Bottom drop
EddingtonSP1.gmg_bottom_solver   = bicgstab     # Bottom solver type. Valid options are 'simple <number>' and 'bicgstab'
EddingtonSP1.gmg_cycle           = vcycle       # Cycle type. Only 'vcycle' supported for now
EddingtonSP1.gmg_ebbc_weight     = 2            # EBBC weight (only for Dirichlet)
EddingtonSP1.gmg_ebbc_order      = 2            # EBBC order (only for Dirichlet)
EddingtonSP1.gmg_smoother        = red_black    # Relaxation type. 'jacobi', 'red_black', or 'multi_color'

# ====================================================================================================
# SurfaceODESolver solver settings. 
# ====================================================================================================
SurfaceODESolver.verbosity = -1                # Chattiness
SurfaceODESolver.regrid    = conservative      # Regrid method. 'conservative' or 'arithmetic'
SurfaceODESolver.plt_vars  = phi               # Plot variables. Valid arguments are 'phi' and 'rhs'


# ====================================================================================================
# GeoCoarsener class options
# ====================================================================================================
GeoCoarsener.num_boxes   = 0            # Number of coarsening boxes (0 = don't coarsen)
GeoCoarsener.box1_lo     = 0.0 0.0 0.0  # Remove irregular cell tags 
GeoCoarsener.box1_hi     = 0.0 0.0 0.0  # between these two corners
GeoCoarsener.box1_lvl    = 0            # up to this level
GeoCoarsener.box1_inv    = false        # Remove except inside box (true)

# ====================================================================================================
# RodDielectric geometry class options
# ====================================================================================================
RodDielectric.electrode.on              = true          # Use electrode or not
RodDielectric.electrode.endpoint1       = 0 500E-6 1         # One endpoint
RodDielectric.electrode.endpoint2       = 0 1 1         # Other endpoint
RodDielectric.electrode.radius          = 50E-6        # Electrode radius
RodDielectric.electrode.live            = true          # Live or not

RodDielectric.dielectric.on             = false          # Use dielectric or not
RodDielectric.dielectric.shape          = perlin_box    # 'plane', 'box', 'perlin_box', 'sphere'
RodDielectric.dielectric.permittivity   = 4             # Dielectric permittivity

# Subsettings for 'plane'
RodDielectric.plane.point               = 0 0 0         # Plane point
RodDielectric.plane.normal              = 0 0 1         # Plane normal vector (outward)

# Subsettings for 'box'
RodDielectric.box.lo_corner             = 0 0 0         # Low corner
RodDielectric.box.hi_corner             = 1 1 1         # Hi corner
RodDielectric.box.curvature             = 0.1

# Subsettings for 'perlin_box'
RodDielectric.perlin_box.point          = 0  0 -0.5     # Slab center-point (side with roughness)
RodDielectric.perlin_box.normal         = 0  0  1       # Slab normal
RodDielectric.perlin_box.curvature      = 0.1           # Slab rounding radius
RodDielectric.perlin_box.dimensions     = 1  1  1       # Slab dimensions
RodDielectric.perlin_box.noise_amp      = 0.1           # Noise amplitude
RodDielectric.perlin_box.noise_octaves  = 1             # Noise octaves
RodDielectric.perlin_box.noise_persist  = 0.5           # Octave persistence
RodDielectric.perlin_box.noise_freq     = 1 1 1         # Noise frequency
RodDielectric.perlin_box.noise_reseed   = false         # Reseed noise or not

# Subsettings for sphere
RodDielectric.sphere.center             = 0 0 0         # Low corner
RodDielectric.sphere.radius             = 0.5           # Radius

# ====================================================================================================
# CdrPlasmaGodunovStepper options
# ====================================================================================================
CdrPlasmaGodunovStepper.verbosity        = -1            # Class verbosity
CdrPlasmaGodunovStepper.solver_verbosity = -1            # Individual solver verbosities
CdrPlasmaGodunovStepper.min_dt           = 1E-14         # Minimum permitted time step
CdrPlasmaGodunovStepper.max_dt           = 1E-14         # Maximum permitted time step
CdrPlasmaGodunovStepper.cfl              = 0.8           # CFL number
CdrPlasmaGodunovStepper.use_regrid_slopes = false        # Use slopes when regridding (or not)
CdrPlasmaGodunovStepper.filter_rho        = 0             # Number of filterings of space charge
CdrPlasmaGodunovStepper.filter_compensate = false         # Use compensation step after filter or not
CdrPlasmaGodunovStepper.field_coupling   = explicit # Field coupling. 'explicit' or 'semi_implicit'
CdrPlasmaGodunovStepper.advection        = muscl         # Advection algorithm. 'euler', 'rk2', or 'muscl'
CdrPlasmaGodunovStepper.diffusion        = explicit      # Diffusion. 'explicit', 'implicit', or 'auto'. 
CdrPlasmaGodunovStepper.diffusion_thresh = 1.2           # Diffusion threshold. If dtD/dtA > this then we use implicit diffusion.
CdrPlasmaGodunovStepper.diffusion_order  = 2             # Diffusion order. 
CdrPlasmaGodunovStepper.relax_time       = 100.          # Relaxation time constant. Not necessary for semi-implicit scheme. 
CdrPlasmaGodunovStepper.fast_poisson     = 1             # Solve Poisson every this time steps. Mostly for debugging.
CdrPlasmaGodunovStepper.fast_rte         = 1             # Solve RTE every this time steps. Mostly for debugging.
CdrPlasmaGodunovStepper.fhd              = false         # Set to true if you want to add a stochastic diffusion flux
CdrPlasmaGodunovStepper.source_comp      = interp        # Interpolated 'interp', 'interp2', or 'upwind X' for first species (X = integer).
CdrPlasmaGodunovStepper.floor_cdr        = true          # Floor CDR solvers to avoid negative densities
CdrPlasmaGodunovStepper.debug            = false         # Turn on debugging messages. Also monitors mass if it was injected into the system. 
CdrPlasmaGodunovStepper.profile          = false         # Turn on/off performance profiling.

# ====================================================================================================
# CdrPlasmaJSON class options
# ====================================================================================================
CdrPlasmaJSON.verbose          = false
CdrPlasmaJSON.chemistry_file   = air_chemistry.json
CdrPlasmaJSON.discrete_photons = false
CdrPlasmaJSON.skip_reactions   = false
CdrPlasmaJSON.integrator       = explicit_midpoint # Reaction network integrator
CdrPlasmaJSON.chemistry_dt     = 1.E99             # Maximum allowed chemistry time step. 

# ====================================================================================================
# CdrPlasmaStreamerTagger class options
# ====================================================================================================
CdrPlasmaStreamerTagger.verbosity         = -1           # Verbosity
CdrPlasmaStreamerTagger.num_tag_boxes     = 0            # Number of allowed tag boxes (0 = tags allowe everywhere)
CdrPlasmaStreamerTagger.tag_box1_lo       = 0.0 0.0 0.0  # Only allow tags that fall between
CdrPlasmaStreamerTagger.tag_box1_hi       = 0.0 0.0 0.0  # these two corners
CdrPlasmaStreamerTagger.buffer            = 4            # Grow tagged cells

CdrPlasmaStreamerTagger.refine_curvature  = 1.E99        # Curvature refinement
CdrPlasmaStreamerTagger.coarsen_curvature = 1.E99        # Curvature coarsening	
CdrPlasmaStreamerTagger.refine_alpha      = 1.5          # Set alpha refinement. Lower  => More mesh
CdrPlasmaStreamerTagger.coarsen_alpha     = 0.2          # Set alpha coarsening. Higher => Less mesh
CdrPlasmaStreamerTagger.max_coarsen_lvl   = 3            # Set max coarsening depth


