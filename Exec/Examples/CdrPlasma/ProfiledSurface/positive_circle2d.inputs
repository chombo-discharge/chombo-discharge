# ====================================================================================================
# Voltage curve
# ====================================================================================================
ProfiledSurface.voltage = 25E3 # Voltage

# ====================================================================================================
# AmrMesh class options
# ====================================================================================================
AmrMesh.lo_corner        =  0    0     # Low corner of problem domain
AmrMesh.hi_corner        =  4E-2 4E-2  # High corner of problem domain
AmrMesh.verbosity        = -1          # Controls verbosity. 
AmrMesh.coarsest_domain  = 64 64       # Number of cells on coarsest domain
AmrMesh.max_amr_depth    = 6           # Maximum amr depth
AmrMesh.max_sim_depth    = -1          # Maximum simulation depth
AmrMesh.fill_ratio       = 1.0         # Fill ratio for grid generation
AmrMesh.buffer_size      = 2           # Number of cells between grid levels
AmrMesh.grid_algorithm   = tiled       # Berger-Rigoustous 'br' or 'tiled' for the tiled algorithm
AmrMesh.box_sorting      = morton      # 'none', 'shuffle', 'morton'
AmrMesh.blocking_factor  = 16          # Default blocking factor (16 in 3D)
AmrMesh.max_box_size     = 16          # Maximum allowed box size
AmrMesh.max_ebis_box     = 16          # Maximum allowed box size
AmrMesh.ref_rat          = 2           # Refinement ratios
AmrMesh.num_ghost        = 2           # Number of ghost cells. Default is 3
AmrMesh.lsf_ghost        = 2           # Number of ghost cells when writing level-set to grid
AmrMesh.eb_ghost         = 2           # Set number of of ghost cells for EB stuff
AmrMesh.mg_interp_order  = 2           # Multigrid interpolation order
AmrMesh.mg_interp_radius = 2           # Multigrid interpolation radius
AmrMesh.mg_interp_weight = 2           # Multigrid interpolation weight (for least squares)
AmrMesh.centroid_sten    = linear      # Centroid interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.eb_sten          = pwl         # EB interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.redist_radius    = 1           # Redistribution radius for hyperbolic conservation laws
AmrMesh.ebcf             = true        # If you have EBCF crossing, this must be true. 

# ====================================================================================================
# Driver class options
# ====================================================================================================
Driver.verbosity                       = 1                # Engine verbosity
Driver.geometry_generation             = chombo-discharge # Grid generation method, 'chombo-discharge' or 'chombo'
Driver.geometry_scan_level             = 0                # Geometry scan level for chombo-discharge geometry generator
Driver.ebis_memory_load_balance        = false            # If using Chombo geo-gen, use memory as loads for EBIS generation  
Driver.plot_interval                   = 10               # Plot interval
Driver.checkpoint_interval             = 100              # Checkpoint interval
Driver.regrid_interval                 = 10               # Regrid interval
Driver.write_regrid_files              = false            # Write regrid files or not.
Driver.write_restart_files             = false            # Write restart files or not
Driver.initial_regrids                 = 4                # Number of initial regrids
Driver.do_init_load_balance            = false            # If true, load balance the first step in a fresh simulation.
Driver.start_time                      = 0                # Start time (fresh simulations only)
Driver.stop_time                       = 75E-9            # Stop time
Driver.max_steps                       = 150000           # Maximum number of steps
Driver.geometry_only                   = false            # Special option that ONLY plots the geometry
Driver.write_memory                    = false            # Write MPI memory report
Driver.write_loads                     = false            # Write (accumulated) computational loads
Driver.output_directory                = ./               # Output directory
Driver.output_names                    = positive_circle  # Simulation output names
Driver.max_plot_depth                  = -1               # Restrict maximum plot depth (-1 => finest simulation level)
Driver.max_chk_depth                   = -1               # Restrict chechkpoint depth (-1 => finest simulation level)	
Driver.num_plot_ghost                  = 0                # Number of ghost cells to include in plots
Driver.plt_vars                        = 0                # 'tags', 'mpi_rank', 'levelset'
Driver.restart                         = 0                # Restart step (less or equal to 0 implies fresh simulation)
Driver.allow_coarsening                = true             # Allows removal of grid levels according to CellTagger
Driver.grow_geo_tags                   = 4                # How much to grow tags when using geometry-based refinement.
Driver.refine_angles                   = 45.              # Refine cells if angle between elements exceed this value.
Driver.refine_electrodes               = 2                # Refine electrode surfaces. -1 => equal to refine_geometry
Driver.refine_dielectrics              = 2                # Refine dielectric surfaces. -1 => equal to refine_geometry

# ====================================================================================================
# FieldSolverMultigrid class options
# ====================================================================================================
FieldSolverMultigrid.verbosity         = -1               # Class verbosity
FieldSolverMultigrid.jump_bc           = natural          # Jump BC type ('natural' or 'saturation_charge')
FieldSolverMultigrid.bc.x.lo           = neumann   0.0    # Bc type (see docs)
FieldSolverMultigrid.bc.x.hi           = dirichlet 0.0    # Bc type (see docs)
FieldSolverMultigrid.bc.y.lo           = dirichlet 0.0    # Bc type (see docs)
FieldSolverMultigrid.bc.y.hi           = neumann   0.0    # Bc type (see docs)
FieldSolverMultigrid.plt_vars          = phi rho E        # Plot variables. Possible vars are 'phi', 'rho', 'E', 'res'
FieldSolverMultigrid.use_regrid_slopes = true             # Use slopes when regridding or not
FieldSolverMultigrid.kappa_source      = true             # Volume weighted space charge density or not (depends on algorithm)
FieldSolverMultigrid.filter            = 0                 # Number of filterings after Poisson solve

FieldSolverMultigrid.gmg_verbosity     = 10               # GMG verbosity
FieldSolverMultigrid.gmg_pre_smooth    = 16               # Number of relaxations in downsweep
FieldSolverMultigrid.gmg_post_smooth   = 16               # Number of relaxations in upsweep
FieldSolverMultigrid.gmg_bott_smooth   = 16               # NUmber of relaxations before dropping to bottom solver
FieldSolverMultigrid.gmg_min_iter      = 5                # Minimum number of iterations
FieldSolverMultigrid.gmg_max_iter      = 32               # Maximum number of iterations
FieldSolverMultigrid.gmg_exit_tol      = 1.E-10           # Residue tolerance
FieldSolverMultigrid.gmg_exit_hang     = 0.2              # Solver hang
FieldSolverMultigrid.gmg_min_cells     = 8                # Bottom drop
FieldSolverMultigrid.gmg_drop_order    = 32               # Drop stencil order to 1 if domain is coarser than this.
FieldSolverMultigrid.gmg_bc_order      = 2	          # Boundary condition order for multigrid
FieldSolverMultigrid.gmg_bc_weight     = 2                # Boundary condition weights (for least squares)
FieldSolverMultigrid.gmg_jump_order    = 2                # Boundary condition order for jump conditions
FieldSolverMultigrid.gmg_jump_weight   = 2                # Boundary condition weight for jump conditions (for least squares)
FieldSolverMultigrid.gmg_bottom_solver = bicgstab         # Bottom solver type. 'simple', 'bicgstab', or 'gmres'
FieldSolverMultigrid.gmg_bottom_relax  = 32               # Number of relaxations in bottom solve ('simple' solver only)
FieldSolverMultigrid.gmg_cycle         = vcycle           # Cycle type. Only 'vcycle' supported for now. 
FieldSolverMultigrid.gmg_smoother      = red_black        # Relaxation type. 'jacobi', 'multi_color', or 'red_black'

# ====================================================================================================
# SurfaceODESolver solver settings. 
# ====================================================================================================
SurfaceODESolver.verbosity = -1                # Chattiness
SurfaceODESolver.regrid    = conservative      # Regrid method. 'conservative' or 'arithmetic'
SurfaceODESolver.plt_vars  = phi               # Plot variables. Valid arguments are 'phi' and 'rhs'

# ====================================================================================================
# CdrCTU solver settings. 
# ====================================================================================================
CdrCTU.bc.x.lo              = data                    # 'data', 'function', 'wall', 'outflow', or 'solver'
CdrCTU.bc.x.hi              = data                    # 'data', 'function', 'wall', 'outflow', or 'solver'
CdrCTU.bc.y.lo              = data                    # 'data', 'function', 'wall', 'outflow', or 'solver'
CdrCTU.bc.y.hi              = data                    # 'data', 'function', 'wall', 'outflow', or 'solver'
CdrCTU.bc.z.lo              = data                    # 'data', 'function', 'wall', 'outflow', or 'solver'
CdrCTU.bc.z.hi              = data                    # 'data', 'function', 'wall', 'outflow', or 'solver'
CdrCTU.slope_limiter        = none                    # Slope limiter. 'none', 'minmod', 'mc', or 'superbee'
CdrCTU.use_ctu              = true                    # If true, use CTU. Otherwise it's DTU.
CdrCTU.plt_vars             = phi vel src dco ebflux  # Plot variables. Options are 'phi', 'vel', 'dco', 'src'
CdrCTU.plot_mode            = density                 # Plot densities 'density' or particle numbers ('numbers')
CdrCTU.blend_conservation   = true                    # Turn on/off blending with nonconservative divergenceo
CdrCTU.which_redistribution = volume                  # Redistribution type. 'volume', 'mass', or 'none' (turned off)
CdrCTU.use_regrid_slopes    = false                   # Turn on/off slopes when regridding
CdrCTU.gmg_verbosity        = -1                      # GMG verbosity
CdrCTU.gmg_pre_smooth       = 12                      # Number of relaxations in GMG downsweep
CdrCTU.gmg_post_smooth      = 12                      # Number of relaxations in upsweep
CdrCTU.gmg_bott_smooth      = 12                      # NUmber of relaxations before dropping to bottom solver
CdrCTU.gmg_min_iter         = 5                       # Minimum number of iterations
CdrCTU.gmg_max_iter         = 32                      # Maximum number of iterations
CdrCTU.gmg_exit_tol         = 1.E-10                  # Residue tolerance
CdrCTU.gmg_exit_hang        = 0.2                     # Solver hang
CdrCTU.gmg_min_cells        = 16                      # Bottom drop
CdrCTU.gmg_bottom_solver    = bicgstab                # Bottom solver type. Valid options are 'simple' and 'bicgstab'
CdrCTU.gmg_cycle            = vcycle                  # Cycle type. Only 'vcycle' supported for now
CdrCTU.gmg_smoother         = red_black               # Relaxation type. 'jacobi', 'multi_color', or 'red_black'

# ====================================================================================================
# EddingtonSP1 class options
# ====================================================================================================
EddingtonSP1.verbosity           = -1
EddingtonSP1.stationary          = true         # Stationary solver
EddingtonSP1.reflectivity        = 0.           # Reflectivity
EddingtonSP1.use_tga             = false        # Use TGA for integration
EddingtonSP1.kappa_scale         = true         # Kappa scale source or not (depends on algorithm)
EddingtonSP1.plt_vars            = phi src      # Plot variables. Available are 'phi' and 'src'
EddingtonSP1.use_regrid_slopes   = true

EddingtonSP1.ebbc                = larsen 0.0   # Bc on embedded boundaries
EddingtonSP1.bc.x.lo             = neumann 0.0  # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.x.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.y.lo             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.y.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.lo             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.hi             = larsen 0.0   # Boundary on domain. 'neumann' or 'larsen'

EddingtonSP1.gmg_verbosity       = -1           # GMG verbosity
EddingtonSP1.gmg_pre_smooth      = 8            # Number of relaxations in downsweep
EddingtonSP1.gmg_post_smooth     = 8            # Number of relaxations in upsweep
EddingtonSP1.gmg_bott_smooth     = 8            # NUmber of relaxations before dropping to bottom solver
EddingtonSP1.gmg_min_iter        = 5            # Minimum number of iterations
EddingtonSP1.gmg_max_iter        = 32           # Maximum number of iterations
EddingtonSP1.gmg_exit_tol        = 1.E-6        # Residue tolerance
EddingtonSP1.gmg_exit_hang       = 0.2          # Solver hang
EddingtonSP1.gmg_min_cells       = 16           # Bottom drop
EddingtonSP1.gmg_bottom_solver   = bicgstab     # Bottom solver type. Valid options are 'simple <number>' and 'bicgstab'
EddingtonSP1.gmg_cycle           = vcycle       # Cycle type. Only 'vcycle' supported for now
EddingtonSP1.gmg_ebbc_weight     = 2            # EBBC weight (only for Dirichlet)
EddingtonSP1.gmg_ebbc_order      = 2            # EBBC order (only for Dirichlet)
EddingtonSP1.gmg_smoother        = red_black    # Relaxation type. 'jacobi', 'red_black', or 'multi_color'


# ====================================================================================================
# GeoCoarsener class options
# ====================================================================================================
GeoCoarsener.num_boxes   = 0            # Number of coarsening boxes (0 = don't coarsen)
GeoCoarsener.box1_lo     = 0.0 0.0 0.0  # Remove irregular cell tags 
GeoCoarsener.box1_hi     = 0.0 0.0 0.0  # between these two corners
GeoCoarsener.box1_lvl    = 0            # up to this level
GeoCoarsener.box1_inv    = false        # Remove except inside box (true)

# ====================================================================================================
# RodPlaneProfile geometry class options
#
# This class described a rod-plane geometry with holes on the dielectric plane. The plane_point
# argument determines the point on the plane (oriented along the y axis), and acts as a reference
# for where the "holes" are placed.
#
# Arguments 'profile_num_left' and 'profile_num_right' sets the number of holes to the left and right
# of this point. You can shift the holes vertically with 'profile_offset', and increase the distance
# between the holes with 'profile_dist'. The 'profile_shift' argument shifts all holes to the left
# or right along the x-axis. The 'profile_curv' arguments sets the radius of curvature. 
# ====================================================================================================
RodPlaneProfile.turn_on_rod       = true          # Turn on/off electrode
RodPlaneProfile.turn_on_plane     = true          # Turn on/off dielectric
RodPlaneProfile.rod_live          = true          # Live electrode or not
RodPlaneProfile.rod_radius        = 500.E-6       # Electrode inner radius
RodPlaneProfile.rod_center1       = 0.0 7.5E-3    # Center 1
RodPlaneProfile.rod_center2       = 0.0 1.0       # Center 2
RodPlaneProfile.plane_width       = 7.200123E-2   # Plane width	
RodPlaneProfile.plane_normal      = 0.0 1.0       # Plane normal. Not used, oriented along +y only 
RodPlaneProfile.plane_point       = 0.0 5E-3      # Center point on plane
RodPlaneProfile.plane_eps         = 3.0           # Plane permittivity
RodPlaneProfile.profile_num_left  = 18            # Number of holes to the left
RodPlaneProfile.profile_num_right = 18            # Number of holes to the left
RodPlaneProfile.profile_dist      = 1948E-6       # Distance between each hole
RodPlaneProfile.profile_xshift    = 1.03E-3       # Horizontal offset
RodPlaneProfile.profile_yshift    = 459E-6        # Vertical offset
RodPlaneProfile.profile_curv      = 100E-6        # Rounding radius

# Shape set. Can use 'circle' or 'square'
RodPlaneProfile.profile       = circle

# Circle specific parameters
RodPlaneProfile.circle_radius = 974E-6

# ====================================================================================================
# CdrPlasmaGodunovStepper options
# ====================================================================================================
CdrPlasmaGodunovStepper.verbosity         = -1             # Class verbosity
CdrPlasmaGodunovStepper.solver_verbosity  = -1             # Individual solver verbosities
CdrPlasmaGodunovStepper.min_dt            = 0.             # Minimum permitted time step
CdrPlasmaGodunovStepper.max_dt            = 1.E99          # Maximum permitted time step
CdrPlasmaGodunovStepper.cfl               = 0.8            # CFL number
CdrPlasmaGodunovStepper.field_coupling    = semi_implicit  # Field coupling. 'explicit' or 'semi_implicit'
CdrPlasmaGodunovStepper.use_regrid_slopes = false          # Turn on/off slopes when doing semi-implicit regrid
CdrPlasmaGodunovStepper.advection         = muscl          # Advection algorithm. 'euler', 'rk2', or 'muscl'
CdrPlasmaGodunovStepper.diffusion         = explicit       # Diffusion. 'explicit', 'implicit', or 'auto'. 
CdrPlasmaGodunovStepper.diffusion_thresh  = 1.2            # Diffusion threshold. If dtD/dtA > this then we use implicit diffusion.
CdrPlasmaGodunovStepper.diffusion_order   = 2              # Diffusion order. 
CdrPlasmaGodunovStepper.relax_time        = 1.E99          # Relaxation time constant. Not necessary for semi-implicit scheme. 
CdrPlasmaGodunovStepper.fast_poisson      = 1              # Solve Poisson every this time steps. Mostly for debugging.
CdrPlasmaGodunovStepper.fast_rte          = 1              # Solve RTE every this time steps. Mostly for debugging.
CdrPlasmaGodunovStepper.fhd               = false          # Set to true if you want to add a stochastic diffusion flux
CdrPlasmaGodunovStepper.source_comp       = upwind 1         # Interpolated 'interp', 'interp2', or 'upwind X' for first species (X = integer).
CdrPlasmaGodunovStepper.floor_cdr         = true           # Floor CDR solvers to avoid negative densities
CdrPlasmaGodunovStepper.debug             = false          # Turn on debugging messages. Also monitors mass if it was injected into the system. 
CdrPlasmaGodunovStepper.profile           = false          # Turn on/off performance profiling.

# ====================================================================================================
# CdrPlasmaJSON class options
# ====================================================================================================
CdrPlasmaJSON.verbose          = false                 # Chattiness
CdrPlasmaJSON.chemistry_file   = air_chemistry.json    # Chemistry input file
CdrPlasmaJSON.discrete_photons = false                 # Generate discrete photons or not
CdrPlasmaJSON.skip_reactions   = false                 # For debugging only, turn on/off reactions
CdrPlasmaJSON.integrator       = explicit_trapezoidal  # Reaction network integrator
CdrPlasmaJSON.chemistry_dt     = 1.E99                 # Substeps in the reaction integrator

# ====================================================================================================
# CdrPlasmaStreamerTagger class options
# ====================================================================================================
CdrPlasmaStreamerTagger.verbosity         = -1           # Verbosity
CdrPlasmaStreamerTagger.num_boxes         = 0            # Number of allowed tag boxes (0 = tags allowe everywhere)
CdrPlasmaStreamerTagger.box1_lo           = 0.0 0.0 0.0  # Only allow tags that fall between
CdrPlasmaStreamerTagger.box1_hi           = 0.0 0.0 0.0  # these two corners
CdrPlasmaStreamerTagger.buffer            = 0            # Grow tagged cells

CdrPlasmaStreamerTagger.refine_curvature  = 1.E99        # Curvature refinement
CdrPlasmaStreamerTagger.coarsen_curvature = 1.E99        # Curvature coarsening	
CdrPlasmaStreamerTagger.refine_alpha      = 2.0          # Set alpha refinement. Lower  => More mesh
CdrPlasmaStreamerTagger.coarsen_alpha     = 0.1          # Set alpha coarsening. Higher => Less mesh
CdrPlasmaStreamerTagger.max_coarsen_lvl   = 3            # Set max coarsening depth
