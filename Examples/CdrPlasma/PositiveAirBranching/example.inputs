# ====================================================================================================
# POTENTIAL CURVE
# ====================================================================================================
PositiveAirBranching.potential = 30E3
PositiveAirBranching.basename  = pout

# ====================================================================================================
# AmrMesh class options
# ====================================================================================================
AmrMesh.lo_corner        = -0.2 -0.2 0.0  # Low corner of problem domain
AmrMesh.hi_corner        =  0.2  0.2 0.1  # High corner of problem domain
AmrMesh.verbosity        = -1          # Controls verbosity. 
AmrMesh.coarsest_domain  = 128 128 32  # Number of cells on coarsest domain
AmrMesh.max_amr_depth    = 6           # Maximum amr depth
AmrMesh.max_sim_depth    = -1          # Maximum simulation depth
AmrMesh.fill_ratio       = 1.0         # Fill ratio for grid generation
AmrMesh.buffer_size      = 2           # Number of cells between grid levels
AmrMesh.grid_algorithm   = tiled       # Berger-Rigoustous 'br' or 'tiled' for the tiled algorithm
AmrMesh.box_sorting      = morton      # 'none', 'shuffle', 'morton'
AmrMesh.blocking_factor  = 16          # Blocking factor. 
AmrMesh.max_box_size     = 16          # Maximum allowed box size
AmrMesh.max_ebis_box     = 16          # Maximum allowed box size for EBIS generation. 
AmrMesh.ref_rat          = 2 2 2 2 2 2 # Refinement ratios (mixed ratios are allowed). 
AmrMesh.num_ghost        = 2           # Number of ghost cells. 
AmrMesh.lsf_ghost        = 2           # Number of ghost cells when writing level-set to grid
AmrMesh.eb_ghost         = 4           # Set number of of ghost cells for EB stuff
AmrMesh.mg_interp_order  = 2           # Multigrid interpolation order
AmrMesh.mg_interp_radius = 2           # Multigrid interpolation radius
AmrMesh.mg_interp_weight = 2           # Multigrid interpolation weight (for least squares)
AmrMesh.centroid_sten    = linear      # Centroid interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.eb_sten          = pwl         # EB interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.redist_radius    = 1           # Redistribution radius for hyperbolic conservation laws


# ====================================================================================================
# Driver class options
# ====================================================================================================
Driver.verbosity                       = 2                # Engine verbosity
Driver.geometry_generation             = chombo-discharge # Grid generation method, 'chombo-discharge' or 'chombo'
Driver.geometry_scan_level             = 0                # Geometry scan level for chombo-discharge geometry generator
Driver.ebis_memory_load_balance        = false            # If using Chombo geo-gen, use memory as loads for EBIS generation  
Driver.plot_interval                   = 100               # Plot interval
Driver.checkpoint_interval             = 100               # Checkpoint interval
Driver.regrid_interval                 = 10               # Regrid interval
Driver.write_regrid_files              = false            # Write regrid files or not.
Driver.write_restart_files             = false            # Write restart files or not
Driver.initial_regrids                 = 4                # Number of initial regrids
Driver.do_init_load_balance            = false            # If true, load balance the first step in a fresh simulation.
Driver.start_time                      = 0                # Start time (fresh simulations only)
Driver.stop_time                       = 200E-9           # Stop time
Driver.max_steps                       = 100000           # Maximum number of steps
Driver.geometry_only                   = false            # Special option that ONLY plots the geometry
Driver.write_memory                    = false            # Write MPI memory report
Driver.write_loads                     = false            # Write (accumulated) computational loads
Driver.output_directory                = ./               # Output directory
Driver.output_names                    = simulation       # Simulation output names
Driver.max_plot_depth                  = -1               # Restrict maximum plot depth (-1 => finest simulation level)
Driver.max_chk_depth                   = -1               # Restrict chechkpoint depth (-1 => finest simulation level)	
Driver.num_plot_ghost                  = 1                # Number of ghost cells to include in plots
Driver.plt_vars                        = 0                # 'tags', 'mpi_rank', 'levelset'
Driver.restart                         = 0                # Restart step (less or equal to 0 implies fresh simulation)
Driver.allow_coarsening                = true             # Allows removal of grid levels according to CellTagger
Driver.grow_geo_tags                   = 2                # How much to grow tags when using geometry-based refinement. 
Driver.refine_angles                   = 30.              # Refine cells if angle between elements exceed this value.
Driver.refine_electrodes               = 0                # Refine electrode surfaces. -1 => equal to refine_geometry
Driver.refine_dielectrics              = 0                # Refine dielectric surfaces. -1 => equal to refine_geometry


# ====================================================================================================
# FieldSolverMultigrid class options
# ====================================================================================================
FieldSolverMultigrid.verbosity         = -1                # Class verbosity
FieldSolverMultigrid.jump_bc           = natural           # Jump BC type ('natural' or 'saturation_charge')
FieldSolverMultigrid.bc.x.lo           = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.x.hi           = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.y.lo           = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.y.hi           = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.z.lo           = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.z.hi           = neumann   0.0     # Bc type (see docs)
FieldSolverMultigrid.plt_vars          = phi rho E         # Plot variables. Possible vars are 'phi', 'rho', 'E', 'res', 'sigma'
FieldSolverMultigrid.kappa_source      = true              # Volume weighted space charge density or not (depends on algorithm)

FieldSolverMultigrid.gmg_verbosity     = -1                # GMG verbosity
FieldSolverMultigrid.gmg_pre_smooth    = 12                # Number of relaxations in downsweep
FieldSolverMultigrid.gmg_post_smooth   = 12                # Number of relaxations in upsweep
FieldSolverMultigrid.gmg_bott_smooth   = 12                # Number of at bottom level (before dropping to bottom solver)
FieldSolverMultigrid.gmg_min_iter      = 5                 # Minimum number of iterations
FieldSolverMultigrid.gmg_max_iter      = 32                # Maximum number of iterations
FieldSolverMultigrid.gmg_exit_tol      = 1.E-10            # Residue tolerance
FieldSolverMultigrid.gmg_exit_hang     = 0.2               # Solver hang
FieldSolverMultigrid.gmg_min_cells     = 16                # Bottom drop
FieldSolverMultigrid.gmg_bc_order      = 2                 # Boundary condition order for multigrid
FieldSolverMultigrid.gmg_bc_weight     = 2                 # Boundary condition weights (for least squares)
FieldSolverMultigrid.gmg_jump_order    = 2                 # Boundary condition order for jump conditions
FieldSolverMultigrid.gmg_jump_weight   = 2                 # Boundary condition weight for jump conditions (for least squares)
FieldSolverMultigrid.gmg_bottom_solver = bicgstab          # Bottom solver type. 'simple', 'bicgstab', or 'gmres'
FieldSolverMultigrid.gmg_cycle         = vcycle            # Cycle type. Only 'vcycle' supported for now. 
FieldSolverMultigrid.gmg_smoother      = red_black         # Relaxation type. 'jacobi', 'multi_color', or 'red_black'


# ====================================================================================================
# CdrGodunov solver settings
# ====================================================================================================
CdrGodunov.seed                  = -1                      # Seed. Random seed with seed < 0
CdrGodunov.bc.x.lo               = wall                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.bc.x.hi               = wall                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.bc.y.lo               = wall                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.bc.y.hi               = wall                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.bc.z.lo               = wall                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.bc.z.hi               = wall                    # 'data', 'function', 'wall', 'outflow', 'solver'
CdrGodunov.limit_slopes          = true                    # Use slope-limiters for godunov
CdrGodunov.plt_vars              = phi vel src dco ebflux  # Plot variables. Options are 'phi', 'vel', 'dco', 'src'
CdrGodunov.extrap_source         = false                   # Flag for including source term for time-extrapolation
CdrGodunov.plot_mode             = density                 # Plot densities 'density' or particle numbers ('numbers')
CdrGodunov.blend_conservation    = true                    # Turn on/off blending with nonconservative divergenceo
CdrGodunov.which_redistribution  = volume                  # Redistribution type. 'volume', 'mass', or 'none' (turned off)
CdrGodunov.gmg_verbosity         = -1                      # GMG verbosity
CdrGodunov.gmg_pre_smooth        = 12                      # Number of relaxations in GMG downsweep
CdrGodunov.gmg_post_smooth       = 12                      # Number of relaxations in upsweep
CdrGodunov.gmg_bott_smooth       = 12                      # Number of relaxations before dropping to bottom solver
CdrGodunov.gmg_min_iter          = 5                       # Minimum number of iterations
CdrGodunov.gmg_max_iter          = 32                      # Maximum number of iterations
CdrGodunov.gmg_exit_tol          = 1.E-10                  # Residue tolerance
CdrGodunov.gmg_exit_hang         = 0.2                     # Solver hang
CdrGodunov.gmg_min_cells         = 16                      # Bottom drop
CdrGodunov.gmg_bottom_solver     = bicgstab                # Bottom solver type. Valid options are 'simple' and 'bicgstab'
CdrGodunov.gmg_cycle             = vcycle                  # Cycle type. Only 'vcycle' supported for now
CdrGodunov.gmg_smoother          = red_black               # Relaxation type. 'jacobi', 'multi_color', or 'red_black'


# ====================================================================================================
# MC_PHOTO CLASS OPTIONS
# ====================================================================================================
McPhoto.instantaneous      = true          # Instantaneous transport or not
McPhoto.max_photons        = 1             # Maximum no. generated in a cell (< = 0 yields physical Photons)
McPhoto.blend_conservation = false         # Switch for blending with the nonconservative divergence
McPhoto.pvr_buffer         = 0             # Buffer for PVR. 
McPhoto.halo_buffer        = 1             # Halo region for particles. 
McPhoto.random_kappa       = true          # Randomize absorption length (taken from Photon implementation)
McPhoto.plt_vars           = phi src phot  # Available are 'phi' and 'src', 'phot', 'eb_phot', 'dom_phot', 'bulk_phot', 'src_phot'
McPhoto.plot_deposition    = cic           # Cloud-in-cell for plotting particles. 
McPhoto.intersection_alg   = bisection     # EB intersection algorithm. Supported are: 'raycast' 'bisection'
McPhoto.bisect_step        = 1.E-4         # Bisection step length for intersection tests
McPhoto.seed               = 0             # Seed for RNG
McPhoto.bc_x_low           = outflow       # Boundary condition. 'outflow', 'symmetry', or 'wall'
McPhoto.bc_x_high          = outflow       # Boundary condition
McPhoto.bc_y_low           = outflow       # Boundary condition
McPhoto.bc_y_high          = outflow       # Boundary condition
McPhoto.bc_z_low           = outflow       # Boundary condition
McPhoto.bc_z_high          = outflow       # Boundary condition
McPhoto.poiss_exp_swap     = 100           # Swap out Poisson with exponential distribution above this mean
McPhoto.photon_generation  = deterministic # Volumetric source term. 'deterministic' or 'stochastic'
McPhoto.source_type        = number        # 'number'       = Source term contains the number of Photons produced
                                            # 'volume'       = Source terms contains the number of Photons produced per unit volume
                                            # 'volume_rate'  = Source terms contains the volumetric rate
                                            # 'rate'         = Source terms contains the rate
McPhoto.deposition         = cic           # 'ngp'  = nearest grid point
                                            # 'num'  = # of Photons per cell
                                            # 'cic'  = cloud-in-cell
                                            # 'tsc'  = triangle-shaped-cloud
                                            # 'w4'   = 3rd order interpolation



# ====================================================================================================
# GeoCoarsener class options
# ====================================================================================================
GeoCoarsener.num_boxes   = 0            # Number of coarsening boxes (0 = don't coarsen)
GeoCoarsener.box1_lo     = 0.0 0.0 0.0  # Remove irregular cell tags 
GeoCoarsener.box1_hi     = 0.0 0.0 0.0  # between these two corners
GeoCoarsener.box1_lvl    = 0            # up to this level
GeoCoarsener.box1_inv    = false        # Remove except inside box (true)

# ====================================================================================================
# VESSEL CLASS OPTIONS
#
# This class is a pin-mushroom type geometry commonly used in high-voltage pressure/vaccum
# Vessel. It (currently) consists of a rod electrode and a "mushroom" flat plate electrode, set up
# along +y/+z in 2D/3D
# ====================================================================================================
Vessel.use_rod       = true           # Rod is on/off
Vessel.use_shroom    = false          # Plate is on/off

Vessel.rod_point     = 0. 0. 75E-3    # Rod center point
Vessel.rod_radius    = 1E-3           # Rod radius

Vessel.shroom_point  = 0. 0. 25E-3    # Mushroom center point
Vessel.shroom_R      = 3E-2           # Mushroom head radius
Vessel.shroom_r      = 2.5E-3         # Mushroom stem radius
Vessel.shroom_d      = 5E-3           # Mushroom head thickness
Vessel.shroom_curv   = 2.5E-3         # Mushroom corner curvatures

Vessel.live_rod      = true           # Rod is live or not
Vessel.live_shroom   = false          # Mushroom is live or not

# ====================================================================================================
# GODUNOV CLASS OPTIONS
# ====================================================================================================
CdrPlasmaGodunovStepper.verbosity        = -1        # Class verbosity
CdrPlasmaGodunovStepper.solver_verbosity = -1        # Individual solver verbosities
CdrPlasmaGodunovStepper.min_dt           = 0.        # Minimum permitted time step
CdrPlasmaGodunovStepper.max_dt           = 1.E99     # Maximum permitted time step
CdrPlasmaGodunovStepper.cfl              = 0.9       # CFL number
CdrPlasmaGodunovStepper.diffusion        = explicit  # Diffusion. 'explicit', 'implicit', or 'auto'
CdrPlasmaGodunovStepper.transport        = euler     # Transport algorithm. 'euler' or 'rk2'
CdrPlasmaGodunovStepper.relax_time       = 0.5       # Relaxation time constant
CdrPlasmaGodunovStepper.fast_poisson     = 1         # Solve Poisson every this time steps. Mostly for debugging.
CdrPlasmaGodunovStepper.fast_rte         = 1         # Solve RTE every this time steps. Mostly for debugging.
CdrPlasmaGodunovStepper.fhd              = false     # Set to true if you want to add a stochastic diffusion flux
CdrPlasmaGodunovStepper.source_comp      = upwind 4  # Interpolated 'interp' or cell-average 'cell_ave' for source computations
CdrPlasmaGodunovStepper.extrap_advect    = true      # Use time-extrapolation capabilities (if they exist) in the CdrSolver
CdrPlasmaGodunovStepper.floor_cdr        = true      # Floor CDR solvers to avoid negative densities
CdrPlasmaGodunovStepper.debug            = false     # Turn on debugging messages. Also monitors mass if it was injected into the system. 


# ====================================================================================================
# AIR3_ZHELEZNYAK CLASS OPTIONS
# ====================================================================================================	

# ----------------------------------------------------------------------------------------------------	
# Transport file and # of points to use when converting files to uniform spacings
# ----------------------------------------------------------------------------------------------------
CdrPlasmaAir3Zheleznyak.transport_file      = transport_data.txt          # Transport file
CdrPlasmaAir3Zheleznyak.uniform_tables      = 100	                   #  Converted # of points in transport file

# ----------------------------------------------------------------------------------------------------	
# Gas composition. This should match your BOLSIG stuff!
# ----------------------------------------------------------------------------------------------------
CdrPlasmaAir3Zheleznyak.pressure            = 1.0                         # Gas pressure
CdrPlasmaAir3Zheleznyak.temperature         = 300                         # Gas temperature
CdrPlasmaAir3Zheleznyak.frac_N2             = 0.8                         # N2 fraction
CdrPlasmaAir3Zheleznyak.frac_O2             = 0.2                         # O2 fraction

# ----------------------------------------------------------------------------------------------------	
# Transport properties
# ----------------------------------------------------------------------------------------------------
CdrPlasmaAir3Zheleznyak.use_alpha_corr      = false                       # Soloviev alpha correction	
CdrPlasmaAir3Zheleznyak.mobile_electrons    = true                        # Mobile Electrons or not
CdrPlasmaAir3Zheleznyak.diffusive_electrons = true                        # Diffusive Electrons or not
CdrPlasmaAir3Zheleznyak.mobile_ions         = false                       # Mobile ions or not
CdrPlasmaAir3Zheleznyak.diffusive_ions      = false                       # Diffusive ions or not
CdrPlasmaAir3Zheleznyak.ion_mobility        = 2.E-4                       # Ion mobility

# ----------------------------------------------------------------------------------------------------	
# Chemistry algorithm
# ----------------------------------------------------------------------------------------------------
CdrPlasmaAir3Zheleznyak.chemistry_algorithm = rk2  # 'euler', 'rk2', or 'rk4'
CdrPlasmaAir3Zheleznyak.chemistry_dt        = 1.0  # Minimum dt used for chemistry

# ----------------------------------------------------------------------------------------------------
# RNG stuff
# ----------------------------------------------------------------------------------------------------
CdrPlasmaAir3Zheleznyak.rng_seed            = 0    # RNG seed. < 0 gives a random seed
CdrPlasmaAir3Zheleznyak.poiss_exp_swap      = 100  # Swap from Poisson to exponential distribution

# ----------------------------------------------------------------------------------------------------
# Initial data
# ----------------------------------------------------------------------------------------------------
CdrPlasmaAir3Zheleznyak.uniform_density       = 1.E10        # Uniform density
CdrPlasmaAir3Zheleznyak.seed_density          = 1.E17        # Gaussian seed density
CdrPlasmaAir3Zheleznyak.seed_radius           = 500E-6       # Gaussian seed radius
CdrPlasmaAir3Zheleznyak.seed_position         = 0  0 75E-3   # Gaussian seed position

CdrPlasmaAir3Zheleznyak.particle_weight       = 1.0                   # Initial particle weights
CdrPlasmaAir3Zheleznyak.uniform_pairs         = 0                     # Number of uniformly distributed Electron-ion pairs
CdrPlasmaAir3Zheleznyak.gaussian_pairs        = 0                     # Number of Gaussian distributed Electron-ion pairs
CdrPlasmaAir3Zheleznyak.gaussian_pairs_center = 0.0 0.0 0.0           # Center of seeded Electron-ion pairs
CdrPlasmaAir3Zheleznyak.gaussian_pairs_radius = 500.E-6               # Radius of seeded Electron-ion pairs
CdrPlasmaAir3Zheleznyak.particle_deposition   = ngp                   # 'ngp', 'cic', or 'tsc'	       

# ----------------------------------------------------------------------------------------------------	
# SEE coefficients
# ----------------------------------------------------------------------------------------------------
CdrPlasmaAir3Zheleznyak.electrode_townsend2           = 1.E-6             # SEE on electrodes
CdrPlasmaAir3Zheleznyak.dielectric_townsend2          = 1.E-6             # SEE on dielectrics
CdrPlasmaAir3Zheleznyak.electrode_quantum_efficiency  = 1.E-6             # SEE on electrodes
CdrPlasmaAir3Zheleznyak.dielectric_quantum_efficiency = 1.E-6             # SEE on dielectrics


# ----------------------------------------------------------------------------------------------------	
# Exitation efficiencies, photoionization efficiences, quenching pressure, radiative lifetimes,
# and predissociation lifetime, and absorption lengths. These are pressure independent.
# ----------------------------------------------------------------------------------------------------
CdrPlasmaAir3Zheleznyak.quenching_pressure            = 0.03947           # Quenching pressure for photo-emission (atm)
CdrPlasmaAir3Zheleznyak.photoi_factor                 = 1.0               # Photoionization factor
CdrPlasmaAir3Zheleznyak.photoi_seed                   = 0                 # RNG seed
CdrPlasmaAir3Zheleznyak.photoi_f1                     = 2.925E15          # Lower frequency
CdrPlasmaAir3Zheleznyak.photoi_f2                     = 3.059E15          # High frequency
CdrPlasmaAir3Zheleznyak.photoi_K1                     = 2.65E-2           # Converted to (mPa)^-1
CdrPlasmaAir3Zheleznyak.photoi_K2                     = 1.5               # Converted to (mPa)^-1


# ====================================================================================================
# STREAMER_TAGGER CLASS OPTIONS
# ====================================================================================================
CdrPlasmaStreamerTagger.verbosity         = -1           # Verbosity
CdrPlasmaStreamerTagger.num_boxes         = 0            # Number of allowed tag boxes (0 = tags allowe everywhere)
CdrPlasmaStreamerTagger.box1_lo           = 0.0 0.0 0.0  # Only allow tags that fall between
CdrPlasmaStreamerTagger.box1_hi           = 0.0 0.0 0.0  # these two corners
CdrPlasmaStreamerTagger.buffer            = 0            # Grow tagged cells

CdrPlasmaStreamerTagger.refine_curvature  = 10000.0      # Curvature refinement
CdrPlasmaStreamerTagger.coarsen_curvature = 10000.0      # Curvature coarsening	
CdrPlasmaStreamerTagger.refine_alpha      = 2.0          # Set alpha refinement. Lower  => More mesh
CdrPlasmaStreamerTagger.coarsen_alpha     = 0.1          # Set alpha coarsening. Higher => Less mesh
CdrPlasmaStreamerTagger.max_coarsen_lvl   = 0            # Set max coarsening depth
