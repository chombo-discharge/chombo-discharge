# ====================================================================================================
# POTENTIAL CURVE
# ====================================================================================================
PositiveStreamerProfiledSurface.potential = 20E3
PositiveStreamerProfiledSurface.basename  = pout

# ====================================================================================================
# AMR_MESH OPTIONS
# ====================================================================================================
AmrMesh.lo_corner        =  0    0     # Low corner of problem domain
AmrMesh.hi_corner        =  4E-2 4E-2  # High corner of problem domain
AmrMesh.verbosity        = -1          # Controls verbosity. 
AmrMesh.coarsest_domain  = 64 64       # Number of cells on coarsest domain
AmrMesh.max_amr_depth    = 6           # Maximum amr depth
AmrMesh.max_sim_depth    = -1          # Maximum simulation depth
AmrMesh.fill_ratio       = 1.0         # Fill ratio for grid generation
AmrMesh.buffer_size      = 2           # Number of cells between grid levels
AmrMesh.grid_algorithm   = tiled       # Berger-Rigoustous 'br' or 'tiled' for the tiled algorithm
AmrMesh.box_sorting      = morton      # 'none', 'shuffle', 'morton'
AmrMesh.blocking_factor  = 16          # Default blocking factor (16 in 3D)
AmrMesh.max_box_size     = 16          # Maximum allowed box size
AmrMesh.max_ebis_box     = 16          # Maximum allowed box size
AmrMesh.ref_rat          = 2 2 2 2 2 2 # Refinement ratios
AmrMesh.num_ghost        = 2           # Number of ghost cells. Default is 3
AmrMesh.lsf_ghost        = 2           # Number of ghost cells when writing level-set to grid
AmrMesh.eb_ghost         = 4           # Set number of of ghost cells for EB stuff
AmrMesh.mg_interp_order  = 2           # Multigrid interpolation order
AmrMesh.mg_interp_radius = 2           # Multigrid interpolation radius
AmrMesh.mg_interp_weight = 2           # Multigrid interpolation weight (for least squares)
AmrMesh.centroid_sten    = linear      # Centroid interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.eb_sten          = pwl         # EB interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
AmrMesh.redist_radius    = 1           # Redistribution radius for hyperbolic conservation laws
AmrMesh.ebcf             = true        # If you have EBCF crossing, this must be true. 

# ====================================================================================================
# DRIVER OPTIONS
# ====================================================================================================
Driver.verbosity                       = 2                # Engine verbosity
Driver.geometry_generation             = chombo-discharge # Grid generation method, 'chombo-discharge' or 'chombo'
Driver.geometry_scan_level             = 0                # Geometry scan level for chombo-discharge geometry generator
Driver.ebis_memory_load_balance        = false            # If using Chombo geo-gen, use memory as loads for EBIS generation  
Driver.plot_interval                   = 10               # Plot interval
Driver.checkpoint_interval             = 10               # Checkpoint interval
Driver.regrid_interval                 = 10               # Regrid interval
Driver.write_regrid_files              = false            # Write regrid files or not.
Driver.write_restart_files             = false            # Write restart files or not
Driver.initial_regrids                 = 4                # Number of initial regrids
Driver.start_time                      = 0                # Start time (fresh simulations only)
Driver.stop_time                       = 1.0              # Stop time
Driver.max_steps                       = 100              # Maximum number of steps
Driver.geometry_only                   = false            # Special option that ONLY plots the geometry
Driver.write_memory                    = false            # Write MPI memory report
Driver.write_loads                     = false            # Write (accumulated) computational loads
Driver.output_directory                = ./               # Output directory
Driver.output_names                    = development      # Simulation output names
Driver.max_plot_depth                  = -1               # Restrict maximum plot depth (-1 => finest simulation level)
Driver.max_chk_depth                   = -1               # Restrict chechkpoint depth (-1 => finest simulation level)	
Driver.num_plot_ghost                  = 1                # Number of ghost cells to include in plots
Driver.plt_vars                        = 0                # 'tags', 'mpi_rank', 'levelset'
Driver.restart                         = 0                # Restart step (less or equal to 0 implies fresh simulation)
Driver.allow_coarsening                = true             # Allows removal of grid levels according to CellTagger
Driver.grow_geo_tags                   = 4                # How much to grow tags when using geometry-based refinement. 
Driver.refine_curvature                = 0.0              # Curvature based refinement. Refines cells if curvature*dx*this > 1
Driver.refine_geometry                 = 0                # Refine geometry, -1 => Refine all the way down
Driver.refine_electrodes               = 1                # Refine electrode surfaces. -1 => equal to refine_geometry
Driver.refine_dielectrics              = 2                # Refine dielectric surfaces. -1 => equal to refine_geometry
Driver.refine_electrode_gas_interface  = -1               # Refine electrode-gas interfaces. -1 => ----"----- 
Driver.refine_dielectric_gas_interface = -1               # Refine dielectric-gas interfaces. -1 => ----"-----
Driver.refine_solid_gas_interface      = -1               # Refine solid-gas interfaces. -1 => ----"-----  
Driver.refine_solid_solid_interface    = -1               # Refine solid-solid interfaces. -1 => ----"----- 


# ====================================================================================================
# FieldSolverMultigrid class options
# ====================================================================================================
FieldSolverMultigrid.bc.x.lo      = neumann   0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.x.hi      = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.y.lo      = dirichlet 0.0     # Bc type (see docs)
FieldSolverMultigrid.bc.y.hi      = neumann   0.0     # Bc type (see docs)
FieldSolverMultigrid.plt_vars     = phi rho E res     # Plot variables. Possible vars are 'phi', 'rho', 'E', 'res'
FieldSolverMultigrid.kappa_source = true              # Volume weighted space charge density or not (depends on algorithm)

FieldSolverMultigrid.gmg_verbosity     = 10        # GMG verbosity
FieldSolverMultigrid.gmg_pre_smooth    = 12        # Number of relaxations in downsweep
FieldSolverMultigrid.gmg_post_smooth   = 12        # Number of relaxations in upsweep
FieldSolverMultigrid.gmg_bott_smooth   = 12        # NUmber of relaxations before dropping to bottom solver
FieldSolverMultigrid.gmg_min_iter      = 5         # Minimum number of iterations
FieldSolverMultigrid.gmg_max_iter      = 32        # Maximum number of iterations
FieldSolverMultigrid.gmg_exit_tol      = 1.E-10    # Residue tolerance
FieldSolverMultigrid.gmg_exit_hang     = 0.2       # Solver hang
FieldSolverMultigrid.gmg_min_cells     = 8         # Bottom drop
FieldSolverMultigrid.gmg_bc_order      = 2         # Boundary condition order for multigrid
FieldSolverMultigrid.gmg_bc_weight     = 2         # Boundary condition weights (for least squares)
FieldSolverMultigrid.gmg_jump_order    = 2         # Boundary condition order for jump conditions
FieldSolverMultigrid.gmg_jump_weight   = 2         # Boundary condition weight for jump conditions (for least squares)
FieldSolverMultigrid.gmg_bottom_solver = bicgstab  # Bottom solver type. 'simple', 'bicgstab', or 'gmres'
FieldSolverMultigrid.gmg_bottom_relax  = 32        # Number of relaxations in bottom solve ('simple' solver only)
FieldSolverMultigrid.gmg_cycle         = vcycle    # Cycle type. Only 'vcycle' supported for now. 
FieldSolverMultigrid.gmg_smoother      = red_black # Relaxation type. 'jacobi', 'multi_color', or 'red_black'

# ====================================================================================================
# CDR_MUSCL SOLVER SETTINGS
# ----------------------------------------------------------------------------------------------------
CdrMuscl.seed                 = -1                      # Seed. Random seed with seed < 0
CdrMuscl.bc.x.lo              = data                    # 'data', 'function', 'wall', or 'outflow'
CdrMuscl.bc.x.hi              = data                    # 'data', 'function', 'wall', or 'outflow'
CdrMuscl.bc.y.lo              = data                    # 'data', 'function', 'wall', or 'outflow'
CdrMuscl.bc.y.hi              = data                    # 'data', 'function', 'wall', or 'outflow'
CdrMuscl.limit_slopes         = true                    # Use slope-limiters or not
CdrMuscl.plt_vars             = phi vel src dco ebflux  # Plot variables. Options are 'phi', 'vel', 'dco', 'src'
CdrMuscl.plot_mode            = density                 # Plot densities 'density' or particle numbers ('numbers')
CdrMuscl.blend_conservation   = true                    # Turn on/off blending with nonconservative divergenceo
CdrMuscl.redist_mass_weighted = false                   # Mass weighted redistribution or not
CdrMuscl.gmg_verbosity        = -1                      # GMG verbosity
CdrMuscl.gmg_coarsen          = 4                       # Precoarsening of multigrid levels		
CdrMuscl.gmg_pre_smooth       = 6                       # Number of relaxations in GMG downsweep
CdrMuscl.gmg_post_smooth      = 6                       # Number of relaxations in upsweep
CdrMuscl.gmg_bott_smooth      = 6                       # NUmber of relaxations before dropping to bottom solver
CdrMuscl.gmg_min_iter         = 5                       # Minimum number of iterations
CdrMuscl.gmg_max_iter         = 32                      # Maximum number of iterations
CdrMuscl.gmg_exit_tol         = 1.E-8                   # Residue tolerance
CdrMuscl.gmg_exit_hang        = 0.2                     # Solver hang
CdrMuscl.gmg_min_cells        = 2                       # Bottom drop
CdrMuscl.gmg_bottom_solver    = bicgstab                # Bottom solver type. Valid options are 'simple' and 'bicgstab'
CdrMuscl.gmg_bottom_relax     = 8                       # Number of relaxations in bottom solve ('simple' solver only)
CdrMuscl.gmg_cycle            = vcycle                  # Cycle type. Only 'vcycle' supported for now
CdrMuscl.gmg_smoother         = red_black               # Relaxation type. 'jacobi', 'multi_color', or 'red_black'


# ====================================================================================================
# EddingtonSP1 class options
# ====================================================================================================
EddingtonSP1.stationary          = true         # Stationary solver
EddingtonSP1.reflectivity        = 0.           # Reflectivity
EddingtonSP1.use_tga             = false        # Use TGA for integration
EddingtonSP1.kappa_scale         = false        # Kappa scale source or not (depends on algorithm)
EddingtonSP1.plt_vars            = phi src      # Plot variables. Available are 'phi' and 'src'

EddingtonSP1.ebbc                = larsen 0.0   # Bc on embedded boundaries
EddingtonSP1.bc.x.lo             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.x.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.y.lo             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.y.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.lo             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.hi             = larsen 0.0   # Bc on domain side. 'dirichlet', 'neuman', or 'larsen'
EddingtonSP1.bc.z.hi             = larsen 0.0   # Boundary on domain. 'neumann' or 'larsen'

EddingtonSP1.gmg_verbosity       = -1           # GMG verbosity
EddingtonSP1.gmg_pre_smooth      = 8            # Number of relaxations in downsweep
EddingtonSP1.gmg_post_smooth     = 8            # Number of relaxations in upsweep
EddingtonSP1.gmg_bott_smooth     = 8            # NUmber of relaxations before dropping to bottom solver
EddingtonSP1.gmg_min_iter        = 5            # Minimum number of iterations
EddingtonSP1.gmg_max_iter        = 32           # Maximum number of iterations
EddingtonSP1.gmg_exit_tol        = 1.E-6        # Residue tolerance
EddingtonSP1.gmg_exit_hang       = 0.2          # Solver hang
EddingtonSP1.gmg_min_cells       = 2            # Bottom drop
EddingtonSP1.gmg_bottom_solver   = bicgstab     # Bottom solver type. Valid options are 'simple <number>' and 'bicgstab'
EddingtonSP1.gmg_bottom_relax    = 8            # Number of relaxations in bottom solve ('simple' solver only)
EddingtonSP1.gmg_cycle           = vcycle       # Cycle type. Only 'vcycle' supported for now
EddingtonSP1.gmg_ebbc_weight     = 2            # EBBC weight (only for Dirichlet)
EddingtonSP1.gmg_ebbc_order      = 2            # EBBC order (only for Dirichlet)
EddingtonSP1.gmg_smoother        = red_black    # Relaxation type. 'jacobi', 'red_black', or 'multi_color'

# ====================================================================================================
# GEO_COARSENER CLASS OPTIONS
# ====================================================================================================
GeoCoarsener.num_boxes   = 0            # Number of coarsening boxes (0 = don't coarsen)
GeoCoarsener.box1_lo     = 0.0 0.0 0.0  # Remove irregular cell tags 
GeoCoarsener.box1_hi     = 0.0 0.0 0.0  # between these two corners
GeoCoarsener.box1_lvl    = 0            # up to this level
GeoCoarsener.box1_inv    = false        # Remove except inside box (true)

# ====================================================================================================
# ROD_PLANE_PROFILE_PROFILE CLASS OPTIONS
#
# This class described a rod-plane geometry with holes on the dielectric plane. The plane_point
# argument determines the point on the plane (oriented along the y axis), and acts as a reference
# for where the "holes" are placed.
#
# Arguments 'profile_num_left' and 'profile_num_right' sets the number of holes to the left and right
# of this point. You can shift the holes vertically with 'profile_offset', and increase the distance
# between the holes with 'profile_dist'. The 'profile_shift' argument shifts all holes to the left
# or right along the x-axis. The 'profile_curv' arguments sets the radius of curvature. 
# ====================================================================================================
RodPlaneProfile.turn_on_rod       = true          # Turn on/off electrode
RodPlaneProfile.turn_on_plane     = true          # Turn on/off dielectric
RodPlaneProfile.rod_live          = true          # Live electrode or not
RodPlaneProfile.rod_radius        = 500.E-6       # Electrode inner radius
RodPlaneProfile.rod_center1       = 0.0 1E-2      # Center 1
RodPlaneProfile.rod_center2       = 0.0 1.0       # Center 2
RodPlaneProfile.plane_width       = 7.2E-2        # Plane width	
RodPlaneProfile.plane_normal      = 0.0 1.0       # Plane normal. Not used, oriented along +y only 
RodPlaneProfile.plane_point       = 0.0 5E-3      # Center point on plane
RodPlaneProfile.plane_eps         = 4.0           # Plane permittivity
RodPlaneProfile.profile_num_left  = 19            # Number of holes to the left
RodPlaneProfile.profile_num_right = 19            # Number of holes to the left
RodPlaneProfile.profile_dist      = 2.06E-3       # Distance between each hole
RodPlaneProfile.profile_xshift    = 0.0           # Horizontal offset
RodPlaneProfile.profile_yshift    = 500E-6        # Vertical offset
RodPlaneProfile.profile_curv      = 50E-6         # Rounding radius

# Shape set. Can use 'circle' or 'square'
RodPlaneProfile.profile       = circle

# Circle specific parameters
RodPlaneProfile.circle_radius = 1.031E-3

# Square specific parameters
RodPlaneProfile.square_width  = 1E-3
RodPlaneProfile.square_height = 1E-3	

# ====================================================================================================
# IMEX_SDC CLASS OPTIONS
#
# This class uses semi-implicit spectral deferred corrections. Diffusion is handled implicitly,
# and advection-reaction is handled explicitly.
#
# The maximum possible global order of accuracy is (p+1) where p is the number of subintervals. Each
# correction raises the order by 1 (corr_iter=0 is the first order solution). To reach the maximum
# possible order, you should perform p correction iterations. 
#
# 
# ====================================================================================================
CdrPlasmaImExSdcStepper.verbosity        = -1      # Class verbosity
CdrPlasmaImExSdcStepper.solver_verbosity = -1      # Individual solver verbosities
CdrPlasmaImExSdcStepper.fast_rte         = 1       # Solve RTE every this time steps
CdrPlasmaImExSdcStepper.fast_poisson     = 1       # Solve Poisson every this time steps	
CdrPlasmaImExSdcStepper.min_dt           = 0.      # Minimum permitted time step
CdrPlasmaImExSdcStepper.max_dt           = 1.E99   # Maximum permitted time step
CdrPlasmaImExSdcStepper.cfl              = 0.9     # CFL number
CdrPlasmaImExSdcStepper.relax_time       = 1.0     # Relaxation time constant
CdrPlasmaImExSdcStepper.source_comp      = interp  # Interpolated 'interp' or cell-average 'cell_ave' for source computations
CdrPlasmaImExSdcStepper.use_tga          = false   # 'false' = Euler diffusion. 'true' = TGA diffusion

# ------------------------------------
# Nodes, subintervals, and corrections
# ------------------------------------
CdrPlasmaImExSdcStepper.quad_nodes   = lobatto     # Nodes to be used for quadrature. 'lobatto', 'uniform', or 'chebyshev'
CdrPlasmaImExSdcStepper.subintervals = 1           # Number of subintervals. This will be the maximum possible order.
CdrPlasmaImExSdcStepper.corr_iter    = 1           # Number of iterations of the correction equation. Should be (subintervals-1)
                                                   # for maximum order

# Adaptive time stepping
# ---------------------------------------------------------
CdrPlasmaImExSdcStepper.print_report    = false    # Print report with error and stuff	
CdrPlasmaImExSdcStepper.adaptive_dt     = false    # Use adaptive time stepping
CdrPlasmaImExSdcStepper.error_norm      = 2        # Error norm (0 = Linf)
CdrPlasmaImExSdcStepper.min_corr        = 0        # Minimum number of corrections
CdrPlasmaImExSdcStepper.max_retries     = 100      # Maximum number of tries (for step rejection)
CdrPlasmaImExSdcStepper.max_growth      = 1.2      # Maximum permissible time step growth
CdrPlasmaImExSdcStepper.decrease_safety = 0.9      # Fudge factor when we decrease the time step. 
CdrPlasmaImExSdcStepper.min_cfl         = 0.1      # Minimum CFL
CdrPlasmaImExSdcStepper.max_cfl         = 0.75     # Maximum CFL
CdrPlasmaImExSdcStepper.max_error       = 1.E-3    # Error threshold
CdrPlasmaImExSdcStepper.error_index     = -1       # Error index. If -1, evaluate all CDR solvers	
CdrPlasmaImExSdcStepper.safety          = 0.75     # Safety factor for time stepping

# ---------------------------------------------------------	
# Debugging options
# ---------------------------------------------------------
CdrPlasmaImExSdcStepper.consistent_E      = true   # Use consistent E-field computations (update in between RK stages)
CdrPlasmaImExSdcStepper.consistent_rte    = true   # Use consistent RTE updates
CdrPlasmaImExSdcStepper.compute_v         = true   # Compute v in between substeps. 
CdrPlasmaImExSdcStepper.compute_S         = true   # Compute S in between substeps.
CdrPlasmaImExSdcStepper.compute_D         = true   # Compute S in between substeps.
CdrPlasmaImExSdcStepper.do_advec_src      = true   # Turn off code functionality. Only for debugging 
CdrPlasmaImExSdcStepper.do_diffusion      = true   # Turn off code functionality. Only for debugging
CdrPlasmaImExSdcStepper.do_poisson        = true   # Turn off code functionality. Only for debugging
CdrPlasmaImExSdcStepper.do_rte            = true   # Turn off code functionality. Only for debugging
CdrPlasmaImExSdcStepper.profile_steps     = true  # Profile time steps with order, accuracy, cfl, etc.

# -----------------------
# Advection extrapolation
# -----------------------
CdrPlasmaImExSdcStepper.extrap_advect = false      # Time extrapolate with source and diffusion in advection step


# ====================================================================================================
# AIR3_BOURDON CLASS OPTIONS
# ====================================================================================================	
CdrPlasmaAir3Bourdon.transport_file      = transport_data.txt              # Transport file
CdrPlasmaAir3Bourdon.uniform_tables      = 100    	                   #  Converted # of points in transport file
CdrPlasmaAir3Bourdon.pressure            = 1.0                             # Gas pressure
CdrPlasmaAir3Bourdon.temperature         = 300                             # Gas temperature
CdrPlasmaAir3Bourdon.use_alpha_corr      = false                           # Soloviev alpha correction	
CdrPlasmaAir3Bourdon.mobile_electrons    = true                            # Mobile Electrons or not
CdrPlasmaAir3Bourdon.diffusive_electrons = true                            # Diffusive Electrons or not
CdrPlasmaAir3Bourdon.mobile_ions         = false                           # Mobile ions or not
CdrPlasmaAir3Bourdon.diffusive_ions      = false                           # Diffusive ions or not
CdrPlasmaAir3Bourdon.ion_mobility        = 2.E-4                           # Ion mobility

CdrPlasmaAir3Bourdon.uniform_density       = 1.E4                          # Uniform density
CdrPlasmaAir3Bourdon.seed_density          = 1.E17                         # Gaussian seed density
CdrPlasmaAir3Bourdon.seed_radius           = 100E-6                        # Gaussian seed radius
CdrPlasmaAir3Bourdon.seed_position         = 0.0 1E-2                      # Gaussian seed position

CdrPlasmaAir3Bourdon.electrode_townsend2           = 1.E-6                 # SEE on electrodes
CdrPlasmaAir3Bourdon.dielectric_townsend2          = 1.E-6                 # SEE on dielectrics
CdrPlasmaAir3Bourdon.electrode_quantum_efficiency  = 1.E-6                 # SEE on electrodes
CdrPlasmaAir3Bourdon.dielectric_quantum_efficiency = 1.E-6                 # SEE on dielectrics

CdrPlasmaAir3Bourdon.quenching_pressure            = 0.03947               # Quenching pressure for photo-emission (atm)
CdrPlasmaAir3Bourdon.excitation_efficiency         = 0.6                   # Impact excitation efficiency
CdrPlasmaAir3Bourdon.photoionization_efficiency    = 0.1                   # Photo-ionization efficiency
CdrPlasmaAir3Bourdon.Photon1_A_coeff               = 1.12E-4               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon1_lambda_coeff          = 4.15E-2               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon2_A_coeff               = 2.88E-2               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon2_lambda_coeff          = 1.09E-1               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon3_A_coeff               = 2.76E-1               # Parameters from Bourdon et. al photoionization model
CdrPlasmaAir3Bourdon.Photon3_lambda_coeff          = 6.69E-1               # Parameters from Bourdon et. al photoionization model

CdrPlasmaAir3Bourdon.domain_bc_x_lo = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_x_hi = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_y_lo = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_y_hi = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_z_lo = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'
CdrPlasmaAir3Bourdon.domain_bc_z_hi = extrap                               # Switch for BC on domain edge. 'extrap' or 'wall'

# ====================================================================================================
# STREAMER_TAGGER CLASS OPTIONS
# ====================================================================================================
CdrPlasmaStreamerTagger.verbosity         = -1           # Verbosity
CdrPlasmaStreamerTagger.num_boxes         = 0            # Number of allowed tag boxes (0 = tags allowe everywhere)
CdrPlasmaStreamerTagger.box1_lo           = 0.0 0.0 0.0  # Only allow tags that fall between
CdrPlasmaStreamerTagger.box1_hi           = 0.0 0.0 0.0  # these two corners
CdrPlasmaStreamerTagger.buffer            = 8            # Grow tagged cells

CdrPlasmaStreamerTagger.refine_curvature  = 10.0         # Curvature refinement
CdrPlasmaStreamerTagger.coarsen_curvature = 10.0         # Curvature coarsening	
CdrPlasmaStreamerTagger.refine_alpha      = 1.0          # Set alpha refinement. Lower  => More mesh
CdrPlasmaStreamerTagger.coarsen_alpha     = 0.1          # Set alpha coarsening. Higher => Less mesh
CdrPlasmaStreamerTagger.max_coarsen_lvl   = 0            # Set max coarsening depth

