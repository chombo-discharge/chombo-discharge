# ====================================================================================================
# POTENTIAL CURVE
# ====================================================================================================
air9eed_bourdon.potential = -10E3
air9eed_bourdon.basename  = pout

# ====================================================================================================
# AMR_MESH OPTIONS
# ====================================================================================================
amr_mesh.lo_corner       = -2E-3 -2E-3 # Low corner of problem domain
amr_mesh.hi_corner       =  2E-3  2E-3 # High corner of problem domain
amr_mesh.verbosity       = -1          # Controls verbosity. 
amr_mesh.coarsest_domain = 64 64 # Number of cells on coarsest domain
amr_mesh.max_amr_depth   = 6           # Maximum amr depth
amr_mesh.max_sim_depth   = -1          # Maximum simulation depth
amr_mesh.mg_coarsen      = 4           # Pre-coarsening of MG levels, useful for deeper bottom solves 
amr_mesh.fill_ratio      = 1.0         # Fill ratio for grid generation
amr_mesh.irreg_growth    = 8           # How much to grow irregular tagged cells
amr_mesh.buffer_size     = 2           # Number of cells between grid levels
amr_mesh.lsf_ghost       = 3           # Number of ghost cells when writing level-set to grid
amr_mesh.grid_algorithm  = tiled       # Berger-Rigoustous 'br' or 'tiled' for the tiled algorithm
amr_mesh.box_sorting     = morton      # 'none', 'shuffle', 'morton'
amr_mesh.blocking_factor = 16          # Default blocking factor (16 in 3D)
amr_mesh.max_box_size    = 16          # Maximum allowed box size
amr_mesh.max_ebis_box    = 16          # Maximum allowed box size
amr_mesh.ref_rat         = 2 2 2 2 2 2 2 # Refinement ratios
amr_mesh.num_ghost       = 3           # Number of ghost cells. Default is 3
amr_mesh.eb_ghost        = 4           # Set number of of ghost cells for EB stuff
amr_mesh.centroid_sten   = linear      # Centroid interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
amr_mesh.eb_sten         = pwl         # EB interp stencils. 'pwl', 'linear', 'taylor, 'lsq'
amr_mesh.redist_radius   = 1           # Redistribution radius for hyperbolic conservation laws
amr_mesh.ghost_interp    = pwl         # Ghost cell interpolation type. Valid options are 'pwl' or 'quad'
amr_mesh.load_balance    = volume      # Load balancing algorithm. Valid options are 'volume' or 'elliptic'
amr_mesh.ebcf            = true        # If you have EBCF crossing, this must be true. 

# ====================================================================================================
# DRIVER OPTIONS
# ====================================================================================================
driver.verbosity                       = 2             # Engine verbosity
driver.geometry_generation             = chombo-discharge       # Grid generation method, 'chombo-discharge' or 'chombo'
driver.geometry_scan_level             = 0             # Geometry scan level for chombo-discharge geometry generator
driver.plot_interval                   = 5             # Plot interval
driver.regrid_interval                 = 5             # Regrid interval
driver.checkpoint_interval             = 5             # Checkpoint interval
driver.initial_regrids                 = 0             # Number of initial regrids
driver.write_regrid_files              = false         # Write regrid files or not
driver.write_restart_files             = false         # Write restart files or not
driver.start_time                      = 0             # Start time (fresh simulations only)
driver.stop_time                       = 1.0           # Stop time
driver.max_steps                       = 10            # Maximum number of steps
driver.geometry_only                   = false         # Special option that ONLY plots the geometry
driver.ebis_memory_load_balance        = false         # Use memory as loads for EBIS generation
driver.write_memory                    = false         # Write MPI memory report
driver.write_loads                     = false         # Write (accumulated) computational loads
driver.output_directory                = ./            # Output directory
driver.output_names                    = simulation    # Simulation output names
driver.max_plot_depth                  = -1            # Restrict maximum plot depth (-1 => finest simulation level)
driver.max_chk_depth                   = -1            # Restrict chechkpoint depth (-1 => finest simulation level)	
driver.num_plot_ghost                  = 1             # Number of ghost cells to include in plots
driver.plt_vars                        = 0             # 'tags', 'mpi_rank'
driver.restart                         = 0             # Restart step (less or equal to 0 implies fresh simulation)
driver.allow_coarsening                = false         # Allows removal of grid levels according to cell_tagger
driver.refine_geometry                 = -1            # Refine geometry, -1 => Refine all the way down
driver.refine_electrodes               = -1            # Refine electrode surfaces. -1 => equal to refine_geometry
driver.refine_dielectrics              = -1            # Refine dielectric surfaces. -1 => equal to refine_geometry
driver.refine_electrode_gas_interface  = -1            # Refine electrode-gas interfaces. -1 => ----"-----
driver.refine_dielectric_gas_interface = -1            # Refine dielectric-gas interfaces. -1 => ----"-----
driver.refine_solid_gas_interface      = -1            # Refine solid-gas interfaces. -1 => ----"-----
driver.refine_solid_solid_interface    = -1            # Refine solid-solid interfaces. -1 => ----"-----


# ====================================================================================================
# FIELD_SOLVER_MULTIGRID_GMG CLASS OPTIONS (MULTIFLUID GMG SOLVER SETTINGS)
# ====================================================================================================
field_solver_multigrid.bc_x_low  = neumann           # BC type. "neumann", "dirichlet_ground", "dirichlet_live", or "robin"
field_solver_multigrid.bc_x_high = neumann           # BC type. "neumann", "dirichlet_ground", "dirichlet_live", or "robin"
field_solver_multigrid.bc_y_low  = dirichlet_ground  # BC type. "neumann", "dirichlet_ground", "dirichlet_live", or "robin"
field_solver_multigrid.bc_y_high = dirichlet_live    # BC type. "neumann", "dirichlet_ground", "dirichlet_live", or "robin"
field_solver_multigrid.plt_vars  = phi rho E res     # Plot variables. Possible vars are 'phi', 'rho', 'E', 'res'
field_solver_multigrid.kappa_source = true              # Volume weighted space charge density or not (depends on algorithm)	

field_solver_multigrid.auto_tune         = false     # Do some auto-tuning
field_solver_multigrid.gmg_coarsen       = 4         # Number of coarsenings to use before level aggregation			
field_solver_multigrid.gmg_verbosity     = -1        # GMG verbosity
field_solver_multigrid.gmg_pre_smooth    = 12        # Number of relaxations in downsweep
field_solver_multigrid.gmg_post_smooth   = 12        # Number of relaxations in upsweep
field_solver_multigrid.gmg_bott_smooth   = 12        # NUmber of relaxations before dropping to bottom solver
field_solver_multigrid.gmg_min_iter      = 5         # Minimum number of iterations
field_solver_multigrid.gmg_max_iter      = 32        # Maximum number of iterations
field_solver_multigrid.gmg_tolerance     = 1.E-10    # Residue tolerance
field_solver_multigrid.gmg_hang          = 0.2       # Solver hang
field_solver_multigrid.gmg_bottom_drop   = 4         # Bottom drop
field_solver_multigrid.gmg_bc_order      = 2         # Boundary condition order for multigrid
field_solver_multigrid.gmg_bottom_solver = bicgstab  # Bottom solver type. 'simple', 'bicgstab', or 'gmres'
field_solver_multigrid.gmg_bottom_relax  = 32        # Number of relaxations in bottom solve ('simple' solver only)
field_solver_multigrid.gmg_cycle         = vcycle    # Cycle type. Only 'vcycle' supported for now
field_solver_multigrid.gmg_relax_type    = gsrb      # Relaxation type. 'jacobi', 'gauss_seidel', or 'gsrb'

# ====================================================================================================
# CDR_GDNV SOLVER SETTINGS
# ----------------------------------------------------------------------------------------------------
cdr_gdnv.seed                 = 0                       # Seed. Random seed with seed < 0
cdr_gdnv.domain_bc            = kinetic                 # 'kinetic', 'wall', 'outflow', or 'extrap'
cdr_gdnv.mass_redist          = false                   # Mass-weighted redistribution or volume-weighted
cdr_gdnv.limit_slopes         = true                    # Use slope-limiters for godunov
cdr_gdnv.plt_vars             = phi vel src dco ebflux  # Plot variables. Options are 'phi', 'vel', 'dco', 'src'
cdr_gdnv.extrap_source        = true                    # Flag for including source term for time-extrapolation
cdr_gdnv.blend_conservation   = true                    # Turn on/off blending with nonconservative divergenceo
cdr_gdnv.redist_mass_weighted = false                   # Mass weighted redistribution or not
cdr_gdnv.plot_mode            = density                 # Plot densities 'density' or particle numbers ('numbers')
cdr_gdnv.gmg_verbosity        = -1                      # GMG verbosity
cdr_gdnv.gmg_coarsen          = 4                       # Precoarsening of multigrid levels
cdr_gdnv.gmg_pre_smooth       = 6                       # Number of relaxations in GMG downsweep
cdr_gdnv.gmg_post_smooth      = 6                       # Number of relaxations in upsweep
cdr_gdnv.gmg_bott_smooth      = 6                       # NUmber of relaxations before dropping to bottom solver
cdr_gdnv.gmg_min_iter         = 5                       # Minimum number of iterations
cdr_gdnv.gmg_max_iter         = 32                      # Maximum number of iterations
cdr_gdnv.gmg_tolerance        = 1.E-8                   # Residue tolerance
cdr_gdnv.gmg_hang             = 0.2                     # Solver hang
cdr_gdnv.gmg_bottom_drop      = 2                       # Bottom drop
cdr_gdnv.gmg_bottom_solver    = bicgstab                # Bottom solver type. Valid options are 'simple' and 'bicgstab'
cdr_gdnv.gmg_bottom_relax     = 8                       # Number of relaxations in bottom solve ('simple' solver only)
cdr_gdnv.gmg_cycle            = vcycle                  # Cycle type. Only 'vcycle' supported for now
cdr_gdnv.gmg_relax_type       = gsrb                    # Relaxation type. 'jacobi', 'gauss_seidel', or 'gsrb'

# ====================================================================================================
# EDDINGTON_SP1 CLASS OPTIONS
# ====================================================================================================
eddington_sp1.stationary          = true      # Stationary solver
eddington_sp1.reflectivity        = 0.        # Reflectivity
eddington_sp1.use_tga             = false     # Use TGA for integration
eddington_sp1.plt_vars            = phi src   # Plot variables. Available are 'phi' and 'src'
eddington_sp1.gmg_verbosity       = -1        # GMG verbosity
eddington_sp1.gmg_coarsen         = 4         # Precoarsening of multigrid levels
eddington_sp1.gmg_pre_smooth      = 8         # Number of relaxations in downsweep
eddington_sp1.gmg_post_smooth     = 8         # Number of relaxations in upsweep
eddington_sp1.gmg_bott_smooth     = 8         # NUmber of relaxations before dropping to bottom solver
eddington_sp1.gmg_min_iter        = 5         # Minimum number of iterations
eddington_sp1.gmg_max_iter        = 32        # Maximum number of iterations
eddington_sp1.gmg_tolerance       = 1.E-6     # Residue tolerance
eddington_sp1.gmg_hang            = 0.2       # Solver hang
eddington_sp1.gmg_bottom_drop     = 2         # Bottom drop
eddington_sp1.gmg_bottom_solver   = bicgstab  # Bottom solver type. Valid options are 'simple' and 'bicgstab'
eddington_sp1.gmg_bottom_relax    = 8         # Number of relaxations in bottom solve ('simple' solver only)
eddington_sp1.gmg_cycle           = vcycle    # Cycle type. Only 'vcycle' supported for now
eddington_sp1.gmg_relax_type      = gsrb      # Relaxation type. 'jacobi', 'gauss_seidel', or 'gsrb'
eddington_sp1.stochastic_photons  = false     # Draw discrete photons from continuum distribution
eddington_sp1.seed                = 0         # Seed
eddington_sp1.bc_x_low            = robin     # Boundary on domain. 'neumann' or 'robin'
eddington_sp1.bc_x_high           = robin     # Boundary on domain. 'neumann' or 'robin'              
eddington_sp1.bc_y_low            = robin     # Boundary on domain. 'neumann' or 'robin'
eddington_sp1.bc_y_high           = robin     # Boundary on domain. 'neumann' or 'robin'
eddington_sp1.bc_z_low            = robin     # Boundary on domain. 'neumann' or 'robin'
eddington_sp1.bc_z_high           = robin     # Boundary on domain. 'neumann' or 'robin'

# ====================================================================================================
# GEO_COARSENER CLASS OPTIONS
# ====================================================================================================
geo_coarsener.num_boxes   = 1            # Number of coarsening boxes (0 = don't coarsen)
geo_coarsener.box1_lo     = -1 300E-6    # Remove irregular cell tags 
geo_coarsener.box1_hi     =  1 1         # between these two corners
geo_coarsener.box1_lvl    = 2            # up to this level
geo_coarsener.box1_inv    = false        # Remove except inside box (true)

# ====================================================================================================
# ROD_DIELECTRIC CLASS OPTIONS
# ====================================================================================================
rod_dielectric.electrode.on              = true          # Use electrode or not
rod_dielectric.electrode.endpoint1       = 0 0           # One endpoint
rod_dielectric.electrode.endpoint2       = 0 1           # Other endpoint
rod_dielectric.electrode.radius          = 100E-6        # Electrode radius
rod_dielectric.electrode.live            = true          # Live or not

rod_dielectric.dielectric.on             = false         # Use dielectric or not
rod_dielectric.dielectric.shape          = sphere        # 'plane', 'box', 'perlin_box', 'sphere'.
rod_dielectric.dielectric.permittivity   = 4             # Dielectric permittivity

# Subsettings for 'plane'
rod_dielectric.plane.point               = 0 0 -0.5      # Plane point
rod_dielectric.plane.normal              = 0 0 1         # Plane normal vector (outward)

# Subsettings for 'box'
rod_dielectric.box.lo_corner             = -.75 -.75 -.75 # Lo box corner
rod_dielectric.box.hi_corner             =  .75  .75 -.25 # High box corner
rod_dielectric.box.curvature             = 0.2

# Subsettings for 'perlin_box'
rod_dielectric.perlin_box.point          = 0  0 -0.5     # Slab center-point (side with roughness)
rod_dielectric.perlin_box.normal         = 0  0  1       # Slab normal
rod_dielectric.perlin_box.curvature      = 0.5           # Slab rounding radius
rod_dielectric.perlin_box.dimensions     = 1  1  10      # Slab dimensions
rod_dielectric.perlin_box.noise_amp      = 0.1           # Noise amplitude
rod_dielectric.perlin_box.noise_octaves  = 1             # Noise octaves
rod_dielectric.perlin_box.noise_persist  = 0.5           # Octave persistence
rod_dielectric.perlin_box.noise_freq     = 5 5 5         # Noise frequency
rod_dielectric.perlin_box.noise_reseed   = false         # Reseed noise or not

# Subsettings for sphere
rod_dielectric.sphere.center             = 0 0 -0.5      # Low corner
rod_dielectric.sphere.radius             = 0.25          # Radius


# ====================================================================================================
# GODUNOV CLASS OPTIONS
# ====================================================================================================
godunov.verbosity        = -1        # Class verbosity
godunov.solver_verbosity = -1        # Individual solver verbosities
godunov.min_dt           = 0.        # Minimum permitted time step
godunov.max_dt           = 1.E99     # Maximum permitted time step
godunov.cfl              = 0.8       # CFL number
godunov.diffusion        = implicit  # Diffusion. 'explicit', 'implicit', or 'auto'
godunov.transport        = euler     # Transport algorithm. 'euler' or 'rk2'
godunov.relax_time       = 1.0       # Relaxation time constant
godunov.fast_poisson     = 1         # Solve Poisson every this time steps. Mostly for debugging.
godunov.fast_rte         = 99        # Solve RTE every this time steps. Mostly for debugging. 
godunov.source_comp      = interp    # Interpolated 'interp' or cell-average 'cell_ave' for source computations
godunov.extrap_advect    = false     # Use time-extrapolation capabilities (if they exist) in the cdr_solver
godunov.floor_cdr        = true      # Floor CDR solvers to avoid negative densities
godunov.debug            = true      # Turn on debugging messages. Also monitors mass if it was injected into the system.
godunov.fhd              = false     # Turn on if you want a stochastic diffusion flux

# ====================================================================================================
# AIR9EED_BOURDON CLASS OPTIONS
# ====================================================================================================
air9eed_bourdon.gas_pressure       = 1.0                          # Gas pressure
air9eed_bourdon.transport_file     = air_transport_energy.txt     # Transport file
air9eed_bourdon.uniform_tables     = 100	                  # Converted # of points in transport file

air9eed_bourdon.initial_ionization = 1.E10                        # Initial background ionization

air9eed_bourdon.diffusive_electrons = true                        # Diffusive electrons or not
air9eed_bourdon.mobile_ions         = true                        # Mobile ions or not
air9eed_bourdon.diffusive_ions      = false                       # Diffusive ions or not
air9eed_bourdon.ion_mobility        = 2.E-4                       # Ion mobility

air9eed_bourdon.electrode_townsend2           = 1.E-3             # SEE on electrodes
air9eed_bourdon.dielectric_townsend2          = 1.E-6             # SEE on dielectrics
air9eed_bourdon.electrode_quantum_efficiency  = 1.E-6             # SEE on electrodes
air9eed_bourdon.dielectric_quantum_efficiency = 1.E-6             # SEE on dielectrics

air9eed_bourdon.cathode_work    = 3                               # Work function (in eV) for electrodes
air9eed_bourdon.dielectric_work = 1	                          # Work function (in eV) for dielectrics

air9eed_bourdon.quenching_pressure         = 0.03947              # Quenching pressure
air9eed_bourdon.photoionization_efficiency = 0.1                  # Photoionization efficiency
air9eed_bourdon.excitation_efficiency      = 0.6                  # Excitation efficiency


# ====================================================================================================
# STREAMER_TAGGER CLASS OPTIONS
# ====================================================================================================
streamer_tagger.verbosity         = -1           # Verbosity
streamer_tagger.num_boxes         = 0            # Number of allowed tag boxes (0 = tags allowe everywhere)
streamer_tagger.box1_lo           = 0.0 0.0 0.0  # Only allow tags that fall between
streamer_tagger.box1_hi           = 0.0 0.0 0.0  # these two corners
streamer_tagger.buffer            = 8            # Grow tagged cells

streamer_tagger.refine_curvature  = 10.0         # Curvature refinement
streamer_tagger.coarsen_curvature = 10.0         # Curvature coarsening	
streamer_tagger.refine_alpha      = 0.5          # Set alpha refinement. Lower  => More mesh
streamer_tagger.coarsen_alpha     = 4.0          # Set alpha coarsening. Higher => Less mesh
streamer_tagger.max_coarsen_lvl   = 0            # Set max coarsening depth
